	.file	""
	.text
	.def	snapUpSize;	.scl	3;	.type	32;	.endef
	.seh_proc	snapUpSize
snapUpSize:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$16, %rsp
	.seh_stackalloc	16
	.seh_endprologue
	movl	%ecx, 16(%rbp)
	cmpl	$7, 16(%rbp)
	jg	.L2
	movl	$8, 16(%rbp)
	jmp	.L3
.L2:
	movl	16(%rbp), %eax
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	shrl	%eax
	orl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	shrl	$2, %eax
	orl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	shrl	$4, %eax
	orl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	shrl	$8, %eax
	orl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	shrl	$16, %eax
	orl	%eax, -4(%rbp)
	addl	$1, -4(%rbp)
	movl	-4(%rbp), %eax
	cmpl	%eax, 16(%rbp)
	jg	.L3
	movl	-4(%rbp), %eax
	movl	%eax, 16(%rbp)
.L3:
	movl	16(%rbp), %eax
	addq	$16, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	balloc
	.def	balloc;	.scl	2;	.type	32;	.endef
	.seh_proc	balloc
balloc:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$48, %rsp
	.seh_stackalloc	48
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movl	%edx, 24(%rbp)
	cmpq	$0, 16(%rbp)
	je	.L6
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L6
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	js	.L6
	movq	16(%rbp), %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	jle	.L6
	movq	16(%rbp), %rax
	movl	(%rax), %edx
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, %edx
	jl	.L6
	cmpl	$0, 24(%rbp)
	jg	.L7
.L6:
	movl	$-1, %eax
	jmp	.L8
.L7:
	movq	16(%rbp), %rax
	movl	(%rax), %eax
	cmpl	%eax, 24(%rbp)
	jl	.L9
	movl	24(%rbp), %eax
	movl	%eax, %ecx
	call	snapUpSize
	movl	%eax, -4(%rbp)
	movq	16(%rbp), %rax
	movl	(%rax), %eax
	cmpl	%eax, -4(%rbp)
	jg	.L10
	movl	$0, %eax
	jmp	.L8
.L10:
	movq	16(%rbp), %rax
	movl	(%rax), %edx
	movl	%edx, %eax
	sall	$3, %eax
	subl	%edx, %eax
	movl	%eax, %ecx
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	sall	$3, %eax
	cmpl	%eax, %ecx
	jge	.L11
	nop
	jmp	.L12
.L16:
	nop
.L12:
	movl	-4(%rbp), %eax
	movslq	%eax, %rdx
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rcx
	call	realloc
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.L13
	movl	24(%rbp), %eax
	movl	%eax, -4(%rbp)
	movl	24(%rbp), %eax
	movslq	%eax, %rdx
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rcx
	call	realloc
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.L13
	movl	$-1, %eax
	jmp	.L8
.L11:
	movl	-4(%rbp), %eax
	cltq
	movq	%rax, %rcx
	call	malloc
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	je	.L16
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	je	.L15
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	movslq	%eax, %rcx
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movq	-16(%rbp), %rax
	movq	%rcx, %r8
	movq	%rax, %rcx
	call	memcpy
.L15:
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rcx
	call	free
.L13:
	movq	16(%rbp), %rax
	movq	-16(%rbp), %rdx
	movq	%rdx, 8(%rax)
	movq	16(%rbp), %rax
	movl	-4(%rbp), %edx
	movl	%edx, (%rax)
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cltq
	addq	%rdx, %rax
	movb	$0, (%rax)
.L9:
	movl	$0, %eax
.L8:
	addq	$48, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	ballocmin
	.def	ballocmin;	.scl	2;	.type	32;	.endef
	.seh_proc	ballocmin
ballocmin:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$48, %rsp
	.seh_stackalloc	48
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movl	%edx, 24(%rbp)
	cmpq	$0, 16(%rbp)
	je	.L18
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	jne	.L19
.L18:
	movl	$-1, %eax
	jmp	.L20
.L19:
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	$2147483647, %eax
	je	.L21
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	jns	.L22
.L21:
	movl	$-1, %eax
	jmp	.L20
.L22:
	movq	16(%rbp), %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	jle	.L23
	movq	16(%rbp), %rax
	movl	(%rax), %edx
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, %edx
	jl	.L23
	cmpl	$0, 24(%rbp)
	jg	.L24
.L23:
	movl	$-1, %eax
	jmp	.L20
.L24:
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, 24(%rbp)
	jg	.L25
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	addl	$1, %eax
	movl	%eax, 24(%rbp)
.L25:
	movq	16(%rbp), %rax
	movl	(%rax), %eax
	cmpl	%eax, 24(%rbp)
	je	.L26
	movl	24(%rbp), %eax
	movslq	%eax, %rdx
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rcx
	call	realloc
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.L27
	movl	$-1, %eax
	jmp	.L20
.L27:
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	movslq	%eax, %rdx
	movq	-8(%rbp), %rax
	addq	%rdx, %rax
	movb	$0, (%rax)
	movq	16(%rbp), %rax
	movq	-8(%rbp), %rdx
	movq	%rdx, 8(%rax)
	movq	16(%rbp), %rax
	movl	24(%rbp), %edx
	movl	%edx, (%rax)
.L26:
	movl	$0, %eax
.L20:
	addq	$48, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	bfromcstr
	.def	bfromcstr;	.scl	2;	.type	32;	.endef
	.seh_proc	bfromcstr
bfromcstr:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$64, %rsp
	.seh_stackalloc	64
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	cmpq	$0, 16(%rbp)
	jne	.L29
	movl	$0, %eax
	jmp	.L30
.L29:
	movq	16(%rbp), %rcx
	call	strlen
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	%eax, %edx
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	%eax, %ecx
	movl	%edx, %eax
	subl	%ecx, %eax
	addl	$2, %eax
	movl	%eax, %ecx
	call	snapUpSize
	movl	%eax, -12(%rbp)
	movq	-8(%rbp), %rax
	cmpl	%eax, -12(%rbp)
	jg	.L31
	movl	$0, %eax
	jmp	.L30
.L31:
	movl	$16, %ecx
	call	malloc
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.L32
	movl	$0, %eax
	jmp	.L30
.L32:
	movq	-8(%rbp), %rax
	movl	%eax, %edx
	movq	-24(%rbp), %rax
	movl	%edx, 4(%rax)
	movq	-24(%rbp), %rax
	movl	-12(%rbp), %edx
	movl	%edx, (%rax)
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	cltq
	movq	%rax, %rcx
	call	malloc
	movq	%rax, %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, 8(%rax)
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	jne	.L33
	movq	-24(%rbp), %rax
	movq	%rax, %rcx
	call	free
	movl	$0, %eax
	jmp	.L30
.L33:
	movq	-8(%rbp), %rax
	leaq	1(%rax), %rdx
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rdx, %r8
	movq	16(%rbp), %rdx
	movq	%rax, %rcx
	call	memcpy
	movq	-24(%rbp), %rax
.L30:
	addq	$64, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	bfromcstrrangealloc
	.def	bfromcstrrangealloc;	.scl	2;	.type	32;	.endef
	.seh_proc	bfromcstrrangealloc
bfromcstrrangealloc:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$64, %rsp
	.seh_stackalloc	64
	.seh_endprologue
	movl	%ecx, 16(%rbp)
	movl	%edx, 24(%rbp)
	movq	%r8, 32(%rbp)
	cmpq	$0, 32(%rbp)
	jne	.L35
	movl	$0, %eax
	jmp	.L36
.L35:
	movl	24(%rbp), %eax
	cmpl	16(%rbp), %eax
	jl	.L37
	cmpl	$0, 16(%rbp)
	jns	.L38
.L37:
	movl	$0, %eax
	jmp	.L36
.L38:
	movq	32(%rbp), %rax
	movq	%rax, %rcx
	call	strlen
	movq	%rax, -16(%rbp)
	movl	16(%rbp), %eax
	cltq
	movq	-16(%rbp), %rdx
	addq	$1, %rdx
	cmpq	%rdx, %rax
	jnb	.L39
	movq	-16(%rbp), %rax
	addl	$1, %eax
	movl	%eax, 16(%rbp)
.L39:
	movl	24(%rbp), %eax
	cmpl	16(%rbp), %eax
	jge	.L40
	movl	16(%rbp), %eax
	movl	%eax, 24(%rbp)
.L40:
	movl	24(%rbp), %eax
	movl	%eax, -4(%rbp)
	movl	$16, %ecx
	call	malloc
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.L41
	movl	$0, %eax
	jmp	.L36
.L41:
	movq	-16(%rbp), %rax
	movl	%eax, %edx
	movq	-24(%rbp), %rax
	movl	%edx, 4(%rax)
	jmp	.L42
.L45:
	movl	-4(%rbp), %eax
	sarl	%eax
	movl	%eax, %edx
	movl	16(%rbp), %eax
	sarl	%eax
	addl	%edx, %eax
	movl	%eax, -28(%rbp)
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	je	.L43
	movl	-4(%rbp), %eax
	cmpl	16(%rbp), %eax
	jge	.L44
.L43:
	movq	-24(%rbp), %rax
	movq	%rax, %rcx
	call	free
	movl	$0, %eax
	jmp	.L36
.L44:
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.L42:
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %edx
	movl	%edx, (%rax)
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	cltq
	movq	%rax, %rcx
	call	malloc
	movq	%rax, %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, 8(%rax)
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L45
	movq	-16(%rbp), %rax
	leaq	1(%rax), %rcx
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	32(%rbp), %rdx
	movq	%rcx, %r8
	movq	%rax, %rcx
	call	memcpy
	movq	-24(%rbp), %rax
.L36:
	addq	$64, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	bfromcstralloc
	.def	bfromcstralloc;	.scl	2;	.type	32;	.endef
	.seh_proc	bfromcstralloc
bfromcstralloc:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$32, %rsp
	.seh_stackalloc	32
	.seh_endprologue
	movl	%ecx, 16(%rbp)
	movq	%rdx, 24(%rbp)
	movq	24(%rbp), %rax
	movq	%rax, %r8
	movl	16(%rbp), %edx
	movl	16(%rbp), %ecx
	call	bfromcstrrangealloc
	addq	$32, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	blk2bstr
	.def	blk2bstr;	.scl	2;	.type	32;	.endef
	.seh_proc	blk2bstr
blk2bstr:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$48, %rsp
	.seh_stackalloc	48
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movl	%edx, 24(%rbp)
	cmpq	$0, 16(%rbp)
	je	.L49
	cmpl	$0, 24(%rbp)
	jns	.L50
.L49:
	movl	$0, %eax
	jmp	.L51
.L50:
	movl	$16, %ecx
	call	malloc
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.L52
	movl	$0, %eax
	jmp	.L51
.L52:
	movq	-8(%rbp), %rax
	movl	24(%rbp), %edx
	movl	%edx, 4(%rax)
	cmpl	$0, 24(%rbp)
	je	.L53
	movl	$1, %edx
	jmp	.L54
.L53:
	movl	$2, %edx
.L54:
	movl	24(%rbp), %eax
	addl	%edx, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	movl	%eax, %ecx
	call	snapUpSize
	movl	%eax, -12(%rbp)
	movq	-8(%rbp), %rax
	movl	-12(%rbp), %edx
	movl	%edx, (%rax)
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	cltq
	movq	%rax, %rcx
	call	malloc
	movq	%rax, %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, 8(%rax)
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	jne	.L55
	movq	-8(%rbp), %rax
	movq	%rax, %rcx
	call	free
	movl	$0, %eax
	jmp	.L51
.L55:
	cmpl	$0, 24(%rbp)
	jle	.L56
	movl	24(%rbp), %eax
	movslq	%eax, %rdx
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rdx, %r8
	movq	16(%rbp), %rdx
	movq	%rax, %rcx
	call	memcpy
.L56:
	movq	-8(%rbp), %rax
	movq	8(%rax), %rdx
	movl	24(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movb	$0, (%rax)
	movq	-8(%rbp), %rax
.L51:
	addq	$48, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	bstr2cstr
	.def	bstr2cstr;	.scl	2;	.type	32;	.endef
	.seh_proc	bstr2cstr
bstr2cstr:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$48, %rsp
	.seh_stackalloc	48
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movl	%edx, %eax
	movb	%al, 24(%rbp)
	cmpq	$0, 16(%rbp)
	je	.L58
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	js	.L58
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	jne	.L59
.L58:
	movl	$0, %eax
	jmp	.L60
.L59:
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	movl	%eax, -8(%rbp)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	cltq
	movq	%rax, %rcx
	call	malloc
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.L61
	movq	-16(%rbp), %rax
	jmp	.L60
.L61:
	movl	$0, -4(%rbp)
	jmp	.L62
.L65:
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-4(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	testb	%al, %al
	je	.L63
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-4(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	jmp	.L64
.L63:
	movzbl	24(%rbp), %eax
.L64:
	movl	-4(%rbp), %edx
	movslq	%edx, %rcx
	movq	-16(%rbp), %rdx
	addq	%rcx, %rdx
	movb	%al, (%rdx)
	addl	$1, -4(%rbp)
.L62:
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jl	.L65
	movl	-8(%rbp), %eax
	movslq	%eax, %rdx
	movq	-16(%rbp), %rax
	addq	%rdx, %rax
	movb	$0, (%rax)
	movq	-16(%rbp), %rax
.L60:
	addq	$48, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	bcstrfree
	.def	bcstrfree;	.scl	2;	.type	32;	.endef
	.seh_proc	bcstrfree
bcstrfree:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$32, %rsp
	.seh_stackalloc	32
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	cmpq	$0, 16(%rbp)
	je	.L67
	movq	16(%rbp), %rcx
	call	free
	movl	$0, %eax
	jmp	.L68
.L67:
	movl	$-1, %eax
.L68:
	addq	$32, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	bconcat
	.def	bconcat;	.scl	2;	.type	32;	.endef
	.seh_proc	bconcat
bconcat:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$64, %rsp
	.seh_stackalloc	64
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movq	%rdx, 24(%rbp)
	movq	24(%rbp), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, 16(%rbp)
	je	.L70
	cmpq	$0, 24(%rbp)
	je	.L70
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L70
	movq	24(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	jne	.L71
.L70:
	movl	$-1, %eax
	jmp	.L72
.L71:
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	24(%rbp), %rax
	movl	4(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	16(%rbp), %rax
	movl	(%rax), %eax
	subl	-12(%rbp), %eax
	orl	-12(%rbp), %eax
	orl	-16(%rbp), %eax
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %edx
	addl	%ecx, %edx
	orl	%edx, %eax
	testl	%eax, %eax
	jns	.L73
	movl	$-1, %eax
	jmp	.L72
.L73:
	movq	16(%rbp), %rax
	movl	(%rax), %eax
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %edx
	addl	%ecx, %edx
	addl	$1, %edx
	cmpl	%edx, %eax
	jg	.L74
	movq	24(%rbp), %rax
	movq	8(%rax), %rdx
	movq	16(%rbp), %rax
	movq	8(%rax), %rcx
	movq	%rdx, %rax
	subq	%rcx, %rax
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	js	.L75
	movq	16(%rbp), %rax
	movl	(%rax), %eax
	cltq
	cmpq	%rax, -24(%rbp)
	jge	.L75
	movq	24(%rbp), %rax
	movq	%rax, %rcx
	call	bstrcpy
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.L75
	movl	$-1, %eax
	jmp	.L72
.L75:
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %eax
	addl	%edx, %eax
	addl	$1, %eax
	movl	%eax, %edx
	movq	16(%rbp), %rcx
	call	balloc
	testl	%eax, %eax
	je	.L74
	movq	-8(%rbp), %rax
	cmpq	24(%rbp), %rax
	je	.L76
	movq	-8(%rbp), %rax
	movq	%rax, %rcx
	call	bdestroy
.L76:
	movl	$-1, %eax
	jmp	.L72
.L74:
	cmpl	$0, -16(%rbp)
	je	.L77
	movl	-16(%rbp), %eax
	movslq	%eax, %r8
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	16(%rbp), %rdx
	movq	8(%rdx), %rcx
	movl	-12(%rbp), %edx
	movslq	%edx, %rdx
	addq	%rdx, %rcx
	movq	%rax, %rdx
	call	memmove
.L77:
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	addl	%ecx, %eax
	cltq
	addq	%rdx, %rax
	movb	$0, (%rax)
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %eax
	addl	%eax, %edx
	movq	16(%rbp), %rax
	movl	%edx, 4(%rax)
	movq	-8(%rbp), %rax
	cmpq	24(%rbp), %rax
	je	.L78
	movq	-8(%rbp), %rax
	movq	%rax, %rcx
	call	bdestroy
.L78:
	movl	$0, %eax
.L72:
	addq	$64, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	bconchar
	.def	bconchar;	.scl	2;	.type	32;	.endef
	.seh_proc	bconchar
bconchar:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$48, %rsp
	.seh_stackalloc	48
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movl	%edx, %eax
	movb	%al, 24(%rbp)
	cmpq	$0, 16(%rbp)
	jne	.L80
	movl	$-1, %eax
	jmp	.L81
.L80:
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	16(%rbp), %rax
	movl	(%rax), %eax
	subl	-4(%rbp), %eax
	orl	-4(%rbp), %eax
	testl	%eax, %eax
	js	.L82
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, %edx
	movq	16(%rbp), %rcx
	call	balloc
	testl	%eax, %eax
	je	.L83
.L82:
	movl	$-1, %eax
	jmp	.L81
.L83:
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-4(%rbp), %eax
	cltq
	addq	%rax, %rdx
	movzbl	24(%rbp), %eax
	movb	%al, (%rdx)
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-4(%rbp), %eax
	cltq
	addq	$1, %rax
	addq	%rdx, %rax
	movb	$0, (%rax)
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	leal	1(%rax), %edx
	movq	16(%rbp), %rax
	movl	%edx, 4(%rax)
	movl	$0, %eax
.L81:
	addq	$48, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	bcatcstr
	.def	bcatcstr;	.scl	2;	.type	32;	.endef
	.seh_proc	bcatcstr
bcatcstr:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$48, %rsp
	.seh_stackalloc	48
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movq	%rdx, 24(%rbp)
	cmpq	$0, 16(%rbp)
	je	.L85
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L85
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	js	.L85
	movq	16(%rbp), %rax
	movl	(%rax), %edx
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, %edx
	jl	.L85
	movq	16(%rbp), %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	jle	.L85
	cmpq	$0, 24(%rbp)
	jne	.L86
.L85:
	movl	$-1, %eax
	jmp	.L87
.L86:
	movq	16(%rbp), %rax
	movl	(%rax), %edx
	movq	16(%rbp), %rax
	movl	4(%rax), %ecx
	movl	%edx, %eax
	subl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cltq
	addq	%rdx, %rax
	movq	%rax, -8(%rbp)
	movl	$0, -12(%rbp)
	jmp	.L88
.L90:
	movq	24(%rbp), %rdx
	leaq	1(%rdx), %rax
	movq	%rax, 24(%rbp)
	movq	-8(%rbp), %rax
	leaq	1(%rax), %rcx
	movq	%rcx, -8(%rbp)
	movzbl	(%rdx), %edx
	movb	%dl, (%rax)
	movzbl	(%rax), %eax
	testb	%al, %al
	jne	.L89
	movq	16(%rbp), %rax
	movl	4(%rax), %edx
	movl	-12(%rbp), %eax
	addl	%eax, %edx
	movq	16(%rbp), %rax
	movl	%edx, 4(%rax)
	movl	$0, %eax
	jmp	.L87
.L89:
	addl	$1, -12(%rbp)
.L88:
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jl	.L90
	movq	16(%rbp), %rax
	movl	4(%rax), %edx
	movl	-12(%rbp), %eax
	addl	%eax, %edx
	movq	16(%rbp), %rax
	movl	%edx, 4(%rax)
	movq	24(%rbp), %rax
	movq	%rax, %rcx
	call	strlen
	movl	%eax, %edx
	movq	24(%rbp), %rax
	movl	%edx, %r8d
	movq	%rax, %rdx
	movq	16(%rbp), %rcx
	call	bcatblk
.L87:
	addq	$48, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	bcatblk
	.def	bcatblk;	.scl	2;	.type	32;	.endef
	.seh_proc	bcatblk
bcatblk:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$48, %rsp
	.seh_stackalloc	48
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movq	%rdx, 24(%rbp)
	movl	%r8d, 32(%rbp)
	cmpq	$0, 16(%rbp)
	je	.L92
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L92
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	js	.L92
	movq	16(%rbp), %rax
	movl	(%rax), %edx
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, %edx
	jl	.L92
	movq	16(%rbp), %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	jle	.L92
	cmpq	$0, 24(%rbp)
	je	.L92
	cmpl	$0, 32(%rbp)
	jns	.L93
.L92:
	movl	$-1, %eax
	jmp	.L94
.L93:
	movq	16(%rbp), %rax
	movl	4(%rax), %edx
	movl	32(%rbp), %eax
	addl	%edx, %eax
	movl	%eax, -4(%rbp)
	cmpl	$0, -4(%rbp)
	jns	.L95
	movl	$-1, %eax
	jmp	.L94
.L95:
	movq	16(%rbp), %rax
	movl	(%rax), %eax
	cmpl	%eax, -4(%rbp)
	jl	.L96
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, %edx
	movq	16(%rbp), %rcx
	call	balloc
	testl	%eax, %eax
	jns	.L96
	movl	$-1, %eax
	jmp	.L94
.L96:
	cmpl	$0, 32(%rbp)
	je	.L97
	movl	32(%rbp), %eax
	movslq	%eax, %rdx
	movq	16(%rbp), %rax
	movq	8(%rax), %rcx
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cltq
	addq	%rax, %rcx
	movq	24(%rbp), %rax
	movq	%rdx, %r8
	movq	%rax, %rdx
	call	memmove
.L97:
	movq	16(%rbp), %rax
	movl	-4(%rbp), %edx
	movl	%edx, 4(%rax)
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-4(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movb	$0, (%rax)
	movl	$0, %eax
.L94:
	addq	$48, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	bstrcpy
	.def	bstrcpy;	.scl	2;	.type	32;	.endef
	.seh_proc	bstrcpy
bstrcpy:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$64, %rsp
	.seh_stackalloc	64
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	cmpq	$0, 16(%rbp)
	je	.L99
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	js	.L99
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	jne	.L100
.L99:
	movl	$0, %eax
	jmp	.L101
.L100:
	movl	$16, %ecx
	call	malloc
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.L102
	movl	$0, %eax
	jmp	.L101
.L102:
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, %ecx
	call	snapUpSize
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	cltq
	movq	%rax, %rcx
	call	malloc
	movq	%rax, %rdx
	movq	-16(%rbp), %rax
	movq	%rdx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	jne	.L103
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	cltq
	movq	%rax, %rcx
	call	malloc
	movq	%rax, %rdx
	movq	-16(%rbp), %rax
	movq	%rdx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	jne	.L103
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	call	free
	movl	$0, %eax
	jmp	.L101
.L103:
	movq	-16(%rbp), %rax
	movl	-4(%rbp), %edx
	movl	%edx, (%rax)
	movq	-16(%rbp), %rax
	movl	-20(%rbp), %edx
	movl	%edx, 4(%rax)
	cmpl	$0, -20(%rbp)
	je	.L104
	movl	-20(%rbp), %eax
	movslq	%eax, %rcx
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rcx, %r8
	movq	%rax, %rcx
	call	memcpy
.L104:
	movq	-16(%rbp), %rax
	movq	8(%rax), %rdx
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	cltq
	addq	%rdx, %rax
	movb	$0, (%rax)
	movq	-16(%rbp), %rax
.L101:
	addq	$64, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	bassign
	.def	bassign;	.scl	2;	.type	32;	.endef
	.seh_proc	bassign
bassign:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$32, %rsp
	.seh_stackalloc	32
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movq	%rdx, 24(%rbp)
	cmpq	$0, 24(%rbp)
	je	.L106
	movq	24(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L106
	movq	24(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	jns	.L107
.L106:
	movl	$-1, %eax
	jmp	.L108
.L107:
	movq	24(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	je	.L109
	movq	24(%rbp), %rax
	movl	4(%rax), %eax
	movl	%eax, %edx
	movq	16(%rbp), %rcx
	call	balloc
	testl	%eax, %eax
	je	.L110
	movl	$-1, %eax
	jmp	.L108
.L110:
	movq	24(%rbp), %rax
	movl	4(%rax), %eax
	movslq	%eax, %rcx
	movq	24(%rbp), %rax
	movq	8(%rax), %rdx
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rcx, %r8
	movq	%rax, %rcx
	call	memmove
	jmp	.L111
.L109:
	cmpq	$0, 16(%rbp)
	je	.L112
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L112
	movq	16(%rbp), %rax
	movl	(%rax), %edx
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, %edx
	jl	.L112
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	js	.L112
	movq	16(%rbp), %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	jne	.L111
.L112:
	movl	$-1, %eax
	jmp	.L108
.L111:
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movq	24(%rbp), %rax
	movl	4(%rax), %eax
	cltq
	addq	%rdx, %rax
	movb	$0, (%rax)
	movq	24(%rbp), %rax
	movl	4(%rax), %edx
	movq	16(%rbp), %rax
	movl	%edx, 4(%rax)
	movl	$0, %eax
.L108:
	addq	$32, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	bassignmidstr
	.def	bassignmidstr;	.scl	2;	.type	32;	.endef
	.seh_proc	bassignmidstr
bassignmidstr:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$32, %rsp
	.seh_stackalloc	32
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movq	%rdx, 24(%rbp)
	movl	%r8d, 32(%rbp)
	movl	%r9d, 40(%rbp)
	cmpq	$0, 24(%rbp)
	je	.L114
	movq	24(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L114
	movq	24(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	jns	.L115
.L114:
	movl	$-1, %eax
	jmp	.L116
.L115:
	cmpl	$0, 32(%rbp)
	jns	.L117
	movl	32(%rbp), %eax
	addl	%eax, 40(%rbp)
	movl	$0, 32(%rbp)
.L117:
	movq	24(%rbp), %rax
	movl	4(%rax), %eax
	subl	32(%rbp), %eax
	cmpl	%eax, 40(%rbp)
	jle	.L118
	movq	24(%rbp), %rax
	movl	4(%rax), %eax
	subl	32(%rbp), %eax
	movl	%eax, 40(%rbp)
.L118:
	cmpq	$0, 16(%rbp)
	je	.L119
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L119
	movq	16(%rbp), %rax
	movl	(%rax), %edx
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, %edx
	jl	.L119
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	js	.L119
	movq	16(%rbp), %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	jne	.L120
.L119:
	movl	$-1, %eax
	jmp	.L116
.L120:
	cmpl	$0, 40(%rbp)
	jle	.L121
	movl	40(%rbp), %eax
	movl	%eax, %edx
	movq	16(%rbp), %rcx
	call	balloc
	testl	%eax, %eax
	je	.L122
	movl	$-1, %eax
	jmp	.L116
.L122:
	movl	40(%rbp), %eax
	movslq	%eax, %rcx
	movq	24(%rbp), %rax
	movq	8(%rax), %rdx
	movl	32(%rbp), %eax
	cltq
	addq	%rax, %rdx
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rcx, %r8
	movq	%rax, %rcx
	call	memmove
	movq	16(%rbp), %rax
	movl	40(%rbp), %edx
	movl	%edx, 4(%rax)
	jmp	.L123
.L121:
	movq	16(%rbp), %rax
	movl	$0, 4(%rax)
.L123:
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cltq
	addq	%rdx, %rax
	movb	$0, (%rax)
	movl	$0, %eax
.L116:
	addq	$32, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	bassigncstr
	.def	bassigncstr;	.scl	2;	.type	32;	.endef
	.seh_proc	bassigncstr
bassigncstr:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$48, %rsp
	.seh_stackalloc	48
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movq	%rdx, 24(%rbp)
	cmpq	$0, 16(%rbp)
	je	.L125
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L125
	movq	16(%rbp), %rax
	movl	(%rax), %edx
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, %edx
	jl	.L125
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	js	.L125
	movq	16(%rbp), %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	je	.L125
	cmpq	$0, 24(%rbp)
	jne	.L126
.L125:
	movl	$-1, %eax
	jmp	.L127
.L126:
	movl	$0, -4(%rbp)
	jmp	.L128
.L130:
	movl	-4(%rbp), %eax
	movslq	%eax, %rdx
	movq	24(%rbp), %rax
	addq	%rdx, %rax
	movzbl	(%rax), %edx
	movq	16(%rbp), %rax
	movq	8(%rax), %rcx
	movl	-4(%rbp), %eax
	cltq
	addq	%rcx, %rax
	movb	%dl, (%rax)
	movzbl	(%rax), %eax
	testb	%al, %al
	jne	.L129
	movq	16(%rbp), %rax
	movl	-4(%rbp), %edx
	movl	%edx, 4(%rax)
	movl	$0, %eax
	jmp	.L127
.L129:
	addl	$1, -4(%rbp)
.L128:
	movq	16(%rbp), %rax
	movl	(%rax), %eax
	cmpl	%eax, -4(%rbp)
	jl	.L130
	movq	16(%rbp), %rax
	movl	-4(%rbp), %edx
	movl	%edx, 4(%rax)
	movl	-4(%rbp), %eax
	movslq	%eax, %rdx
	movq	24(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, %rcx
	call	strlen
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	leaq	1(%rax), %rdx
	movl	-4(%rbp), %eax
	movslq	%eax, %rcx
	movl	$2147483647, %eax
	subq	%rcx, %rax
	cmpq	%rax, %rdx
	ja	.L131
	movq	-16(%rbp), %rax
	movl	%eax, %edx
	movl	-4(%rbp), %eax
	addl	%edx, %eax
	addl	$1, %eax
	movl	%eax, %edx
	movq	16(%rbp), %rcx
	call	balloc
	testl	%eax, %eax
	jns	.L132
.L131:
	movl	$-1, %eax
	jmp	.L127
.L132:
	cmpq	$-1, -16(%rbp)
	je	.L133
	movq	-16(%rbp), %rax
	leaq	1(%rax), %rcx
	movl	-4(%rbp), %eax
	movslq	%eax, %rdx
	movq	24(%rbp), %rax
	addq	%rax, %rdx
	movq	16(%rbp), %rax
	movq	8(%rax), %r8
	movl	-4(%rbp), %eax
	cltq
	addq	%r8, %rax
	movq	%rcx, %r8
	movq	%rax, %rcx
	call	memmove
.L133:
	movq	16(%rbp), %rax
	movl	4(%rax), %edx
	movq	-16(%rbp), %rax
	addl	%eax, %edx
	movq	16(%rbp), %rax
	movl	%edx, 4(%rax)
	movl	$0, %eax
.L127:
	addq	$48, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	bassignblk
	.def	bassignblk;	.scl	2;	.type	32;	.endef
	.seh_proc	bassignblk
bassignblk:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$32, %rsp
	.seh_stackalloc	32
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movq	%rdx, 24(%rbp)
	movl	%r8d, 32(%rbp)
	cmpq	$0, 16(%rbp)
	je	.L135
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L135
	movq	16(%rbp), %rax
	movl	(%rax), %edx
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, %edx
	jl	.L135
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	js	.L135
	movq	16(%rbp), %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	je	.L135
	cmpq	$0, 24(%rbp)
	je	.L135
	cmpl	$0, 32(%rbp)
	js	.L135
	cmpl	$2147483647, 32(%rbp)
	jne	.L136
.L135:
	movl	$-1, %eax
	jmp	.L137
.L136:
	movq	16(%rbp), %rax
	movl	(%rax), %eax
	cmpl	%eax, 32(%rbp)
	jl	.L138
	movl	32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, %edx
	movq	16(%rbp), %rcx
	call	balloc
	testl	%eax, %eax
	jns	.L138
	movl	$-1, %eax
	jmp	.L137
.L138:
	cmpl	$0, 32(%rbp)
	je	.L139
	movl	32(%rbp), %eax
	movslq	%eax, %rcx
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	movq	24(%rbp), %rdx
	movq	%rcx, %r8
	movq	%rax, %rcx
	call	memmove
.L139:
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movl	32(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movb	$0, (%rax)
	movq	16(%rbp), %rax
	movl	32(%rbp), %edx
	movl	%edx, 4(%rax)
	movl	$0, %eax
.L137:
	addq	$32, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	btrunc
	.def	btrunc;	.scl	2;	.type	32;	.endef
	.seh_proc	btrunc
btrunc:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movl	%edx, 24(%rbp)
	cmpl	$0, 24(%rbp)
	js	.L141
	cmpq	$0, 16(%rbp)
	je	.L141
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L141
	movq	16(%rbp), %rax
	movl	(%rax), %edx
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, %edx
	jl	.L141
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	js	.L141
	movq	16(%rbp), %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	jg	.L142
.L141:
	movl	$-1, %eax
	jmp	.L143
.L142:
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, 24(%rbp)
	jge	.L144
	movq	16(%rbp), %rax
	movl	24(%rbp), %edx
	movl	%edx, 4(%rax)
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movl	24(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movb	$0, (%rax)
.L144:
	movl	$0, %eax
.L143:
	popq	%rbp
	ret
	.seh_endproc
	.globl	btoupper
	.def	btoupper;	.scl	2;	.type	32;	.endef
	.seh_proc	btoupper
btoupper:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$48, %rsp
	.seh_stackalloc	48
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	cmpq	$0, 16(%rbp)
	je	.L146
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L146
	movq	16(%rbp), %rax
	movl	(%rax), %edx
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, %edx
	jl	.L146
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	js	.L146
	movq	16(%rbp), %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	jg	.L147
.L146:
	movl	$-1, %eax
	jmp	.L148
.L147:
	movl	$0, -4(%rbp)
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	movl	%eax, -8(%rbp)
	jmp	.L149
.L150:
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-4(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	movb	%al, -9(%rbp)
	call	__locale_ctype_ptr
	movzbl	-9(%rbp), %eax
	movl	%eax, %ecx
	call	toupper
	movl	%eax, %edx
	movq	16(%rbp), %rax
	movq	8(%rax), %rcx
	movl	-4(%rbp), %eax
	cltq
	addq	%rcx, %rax
	movb	%dl, (%rax)
	addl	$1, -4(%rbp)
.L149:
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jl	.L150
	movl	$0, %eax
.L148:
	addq	$48, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	btolower
	.def	btolower;	.scl	2;	.type	32;	.endef
	.seh_proc	btolower
btolower:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$48, %rsp
	.seh_stackalloc	48
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	cmpq	$0, 16(%rbp)
	je	.L152
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L152
	movq	16(%rbp), %rax
	movl	(%rax), %edx
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, %edx
	jl	.L152
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	js	.L152
	movq	16(%rbp), %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	jg	.L153
.L152:
	movl	$-1, %eax
	jmp	.L154
.L153:
	movl	$0, -4(%rbp)
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	movl	%eax, -8(%rbp)
	jmp	.L155
.L156:
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-4(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	movb	%al, -9(%rbp)
	call	__locale_ctype_ptr
	movzbl	-9(%rbp), %eax
	movl	%eax, %ecx
	call	tolower
	movl	%eax, %edx
	movq	16(%rbp), %rax
	movq	8(%rax), %rcx
	movl	-4(%rbp), %eax
	cltq
	addq	%rcx, %rax
	movb	%dl, (%rax)
	addl	$1, -4(%rbp)
.L155:
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jl	.L156
	movl	$0, %eax
.L154:
	addq	$48, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	bstricmp
	.def	bstricmp;	.scl	2;	.type	32;	.endef
	.seh_proc	bstricmp
bstricmp:
	pushq	%rbp
	.seh_pushreg	%rbp
	pushq	%rbx
	.seh_pushreg	%rbx
	subq	$72, %rsp
	.seh_stackalloc	72
	leaq	128(%rsp), %rbp
	.seh_setframe	%rbp, 128
	.seh_endprologue
	movq	%rcx, -32(%rbp)
	movq	%rdx, -24(%rbp)
	cmpq	$0, -32(%rbp)
	je	.L158
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L158
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L158
	movq	-32(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	js	.L158
	cmpq	$0, -24(%rbp)
	je	.L158
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L158
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L158
	movq	-24(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	jns	.L159
.L158:
	movl	$-32768, %eax
	jmp	.L160
.L159:
	movq	-32(%rbp), %rax
	movl	4(%rax), %eax
	movl	%eax, -72(%rbp)
	movq	-24(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, -72(%rbp)
	jle	.L161
	movq	-24(%rbp), %rax
	movl	4(%rax), %eax
	movl	%eax, -72(%rbp)
	jmp	.L162
.L161:
	movq	-32(%rbp), %rax
	movl	4(%rax), %edx
	movq	-24(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, %edx
	jne	.L162
	movq	-32(%rbp), %rax
	movq	8(%rax), %rdx
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	cmpq	%rax, %rdx
	jne	.L162
	movl	$0, %eax
	jmp	.L160
.L162:
	movl	$0, -68(%rbp)
	jmp	.L163
.L165:
	movq	-32(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-68(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	movb	%al, -82(%rbp)
	call	__locale_ctype_ptr
	movzbl	-82(%rbp), %eax
	movl	%eax, %ecx
	call	tolower
	movsbl	%al, %ebx
	movq	-24(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-68(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	movb	%al, -83(%rbp)
	call	__locale_ctype_ptr
	movzbl	-83(%rbp), %eax
	movl	%eax, %ecx
	call	tolower
	movsbl	%al, %edx
	movl	%ebx, %eax
	subl	%edx, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -80(%rbp)
	je	.L164
	movl	-80(%rbp), %eax
	jmp	.L160
.L164:
	addl	$1, -68(%rbp)
.L163:
	movl	-68(%rbp), %eax
	cmpl	-72(%rbp), %eax
	jl	.L165
	movq	-32(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, -72(%rbp)
	jge	.L166
	movq	-32(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-72(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	movb	%al, -81(%rbp)
	call	__locale_ctype_ptr
	movzbl	-81(%rbp), %eax
	movl	%eax, %ecx
	call	tolower
	movsbl	%al, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -80(%rbp)
	je	.L167
	movl	-80(%rbp), %eax
	jmp	.L160
.L167:
	movl	$256, %eax
	jmp	.L160
.L166:
	movq	-24(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, -72(%rbp)
	jge	.L168
	movq	-24(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-72(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	movb	%al, -73(%rbp)
	call	__locale_ctype_ptr
	movzbl	-73(%rbp), %eax
	movl	%eax, %ecx
	call	tolower
	movsbl	%al, %eax
	negl	%eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -80(%rbp)
	je	.L169
	movl	-80(%rbp), %eax
	jmp	.L160
.L169:
	movl	$-256, %eax
	jmp	.L160
.L168:
	movl	$0, %eax
.L160:
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	ret
	.seh_endproc
	.globl	bstrnicmp
	.def	bstrnicmp;	.scl	2;	.type	32;	.endef
	.seh_proc	bstrnicmp
bstrnicmp:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$64, %rsp
	.seh_stackalloc	64
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movq	%rdx, 24(%rbp)
	movl	%r8d, 32(%rbp)
	cmpq	$0, 16(%rbp)
	je	.L171
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L171
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L171
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	js	.L171
	cmpq	$0, 24(%rbp)
	je	.L171
	movq	24(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L171
	movq	24(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L171
	movq	24(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	js	.L171
	cmpl	$0, 32(%rbp)
	jns	.L172
.L171:
	movl	$-32768, %eax
	jmp	.L173
.L172:
	movl	32(%rbp), %eax
	movl	%eax, -8(%rbp)
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, -8(%rbp)
	jle	.L174
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	movl	%eax, -8(%rbp)
.L174:
	movq	24(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, -8(%rbp)
	jle	.L175
	movq	24(%rbp), %rax
	movl	4(%rax), %eax
	movl	%eax, -8(%rbp)
.L175:
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movq	24(%rbp), %rax
	movq	8(%rax), %rax
	cmpq	%rax, %rdx
	je	.L176
	movl	$0, -4(%rbp)
	jmp	.L177
.L179:
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-4(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	movb	%al, -9(%rbp)
	call	__locale_ctype_ptr
	movzbl	-9(%rbp), %eax
	movl	%eax, %ecx
	call	tolower
	movsbl	%al, %eax
	movl	%eax, -16(%rbp)
	movq	24(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-4(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	movb	%al, -17(%rbp)
	call	__locale_ctype_ptr
	movzbl	-17(%rbp), %eax
	movl	%eax, %ecx
	call	tolower
	movsbl	%al, %eax
	subl	%eax, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.L178
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-4(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	movzbl	%al, %edx
	movq	24(%rbp), %rax
	movq	8(%rax), %rcx
	movl	-4(%rbp), %eax
	cltq
	addq	%rcx, %rax
	movzbl	(%rax), %eax
	movzbl	%al, %ecx
	movl	%edx, %eax
	subl	%ecx, %eax
	jmp	.L173
.L178:
	addl	$1, -4(%rbp)
.L177:
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jl	.L179
.L176:
	movl	32(%rbp), %eax
	cmpl	-8(%rbp), %eax
	je	.L180
	movq	16(%rbp), %rax
	movl	4(%rax), %edx
	movq	24(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, %edx
	jne	.L181
.L180:
	movl	$0, %eax
	jmp	.L173
.L181:
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, -8(%rbp)
	jge	.L182
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-8(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	movb	%al, -19(%rbp)
	call	__locale_ctype_ptr
	movzbl	-19(%rbp), %eax
	movl	%eax, %ecx
	call	tolower
	movsbl	%al, %eax
	movl	%eax, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.L183
	movl	-16(%rbp), %eax
	jmp	.L173
.L183:
	movl	$256, %eax
	jmp	.L173
.L182:
	movq	24(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-8(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	movb	%al, -18(%rbp)
	call	__locale_ctype_ptr
	movzbl	-18(%rbp), %eax
	movl	%eax, %ecx
	call	tolower
	movsbl	%al, %eax
	negl	%eax
	movl	%eax, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.L184
	movl	-16(%rbp), %eax
	jmp	.L173
.L184:
	movl	$-256, %eax
.L173:
	addq	$64, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	biseqcaselessblk
	.def	biseqcaselessblk;	.scl	2;	.type	32;	.endef
	.seh_proc	biseqcaselessblk
biseqcaselessblk:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$48, %rsp
	.seh_stackalloc	48
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movq	%rdx, 24(%rbp)
	movl	%r8d, 32(%rbp)
	cmpq	$0, 16(%rbp)
	je	.L186
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L186
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L186
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	js	.L186
	cmpq	$0, 24(%rbp)
	je	.L186
	cmpl	$0, 32(%rbp)
	jns	.L187
.L186:
	movl	$-1, %eax
	jmp	.L188
.L187:
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, 32(%rbp)
	je	.L189
	movl	$0, %eax
	jmp	.L188
.L189:
	cmpl	$0, 32(%rbp)
	je	.L190
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	cmpq	%rax, 24(%rbp)
	jne	.L191
.L190:
	movl	$1, %eax
	jmp	.L188
.L191:
	movl	$0, -4(%rbp)
	jmp	.L192
.L194:
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-4(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %edx
	movl	-4(%rbp), %eax
	movslq	%eax, %rcx
	movq	24(%rbp), %rax
	addq	%rcx, %rax
	movzbl	(%rax), %eax
	cmpb	%al, %dl
	je	.L193
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-4(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	movb	%al, -5(%rbp)
	call	__locale_ctype_ptr
	movzbl	-5(%rbp), %eax
	movl	%eax, %ecx
	call	tolower
	movb	%al, -6(%rbp)
	movl	-4(%rbp), %eax
	movslq	%eax, %rdx
	movq	24(%rbp), %rax
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	movb	%al, -7(%rbp)
	call	__locale_ctype_ptr
	movzbl	-7(%rbp), %eax
	movl	%eax, %ecx
	call	tolower
	cmpb	%al, -6(%rbp)
	je	.L193
	movl	$0, %eax
	jmp	.L188
.L193:
	addl	$1, -4(%rbp)
.L192:
	movl	-4(%rbp), %eax
	cmpl	32(%rbp), %eax
	jl	.L194
	movl	$1, %eax
.L188:
	addq	$48, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	biseqcaseless
	.def	biseqcaseless;	.scl	2;	.type	32;	.endef
	.seh_proc	biseqcaseless
biseqcaseless:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$32, %rsp
	.seh_stackalloc	32
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movq	%rdx, 24(%rbp)
	cmpq	$0, 24(%rbp)
	jne	.L196
	movl	$-1, %eax
	jmp	.L197
.L196:
	movq	24(%rbp), %rax
	movl	4(%rax), %edx
	movq	24(%rbp), %rax
	movq	8(%rax), %rax
	movl	%edx, %r8d
	movq	%rax, %rdx
	movq	16(%rbp), %rcx
	call	biseqcaselessblk
.L197:
	addq	$32, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	bisstemeqcaselessblk
	.def	bisstemeqcaselessblk;	.scl	2;	.type	32;	.endef
	.seh_proc	bisstemeqcaselessblk
bisstemeqcaselessblk:
	pushq	%rbp
	.seh_pushreg	%rbp
	pushq	%rbx
	.seh_pushreg	%rbx
	subq	$56, %rsp
	.seh_stackalloc	56
	leaq	128(%rsp), %rbp
	.seh_setframe	%rbp, 128
	.seh_endprologue
	movq	%rcx, -48(%rbp)
	movq	%rdx, -40(%rbp)
	movl	%r8d, -32(%rbp)
	cmpq	$0, -48(%rbp)
	je	.L199
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L199
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L199
	movq	-48(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	js	.L199
	cmpq	$0, -40(%rbp)
	je	.L199
	cmpl	$0, -32(%rbp)
	jns	.L200
.L199:
	movl	$-1, %eax
	jmp	.L201
.L200:
	movq	-48(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, -32(%rbp)
	jle	.L202
	movl	$0, %eax
	jmp	.L201
.L202:
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	cmpq	%rax, -40(%rbp)
	je	.L203
	cmpl	$0, -32(%rbp)
	jne	.L204
.L203:
	movl	$1, %eax
	jmp	.L201
.L204:
	movl	$0, -84(%rbp)
	jmp	.L205
.L207:
	movq	-48(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-84(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %edx
	movl	-84(%rbp), %eax
	movslq	%eax, %rcx
	movq	-40(%rbp), %rax
	addq	%rcx, %rax
	movzbl	(%rax), %eax
	cmpb	%al, %dl
	je	.L206
	movq	-48(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-84(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	movb	%al, -85(%rbp)
	call	__locale_ctype_ptr
	movzbl	-85(%rbp), %eax
	movl	%eax, %ecx
	call	tolower
	movl	%eax, %ebx
	movl	-84(%rbp), %eax
	movslq	%eax, %rdx
	movq	-40(%rbp), %rax
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	movb	%al, -86(%rbp)
	call	__locale_ctype_ptr
	movzbl	-86(%rbp), %eax
	movl	%eax, %ecx
	call	tolower
	cmpl	%eax, %ebx
	je	.L206
	movl	$0, %eax
	jmp	.L201
.L206:
	addl	$1, -84(%rbp)
.L205:
	movl	-84(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jl	.L207
	movl	$1, %eax
.L201:
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	ret
	.seh_endproc
	.globl	bltrimws
	.def	bltrimws;	.scl	2;	.type	32;	.endef
	.seh_proc	bltrimws
bltrimws:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$48, %rsp
	.seh_stackalloc	48
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	cmpq	$0, 16(%rbp)
	je	.L209
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L209
	movq	16(%rbp), %rax
	movl	(%rax), %edx
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, %edx
	jl	.L209
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	js	.L209
	movq	16(%rbp), %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	jg	.L210
.L209:
	movl	$-1, %eax
	jmp	.L211
.L210:
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
	jmp	.L212
.L214:
	call	__locale_ctype_ptr
	movq	%rax, %rdx
	movq	16(%rbp), %rax
	movq	8(%rax), %rcx
	movl	-4(%rbp), %eax
	cltq
	addq	%rcx, %rax
	movzbl	(%rax), %eax
	movzbl	%al, %eax
	addq	$1, %rax
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	movsbl	%al, %eax
	andl	$8, %eax
	testl	%eax, %eax
	jne	.L213
	movl	-4(%rbp), %eax
	movl	%eax, %r8d
	movl	$0, %edx
	movq	16(%rbp), %rcx
	call	bdelete
	jmp	.L211
.L213:
	addl	$1, -4(%rbp)
.L212:
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jl	.L214
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	movb	$0, (%rax)
	movq	16(%rbp), %rax
	movl	$0, 4(%rax)
	movl	$0, %eax
.L211:
	addq	$48, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	brtrimws
	.def	brtrimws;	.scl	2;	.type	32;	.endef
	.seh_proc	brtrimws
brtrimws:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$48, %rsp
	.seh_stackalloc	48
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	cmpq	$0, 16(%rbp)
	je	.L216
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L216
	movq	16(%rbp), %rax
	movl	(%rax), %edx
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, %edx
	jl	.L216
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	js	.L216
	movq	16(%rbp), %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	jg	.L217
.L216:
	movl	$-1, %eax
	jmp	.L218
.L217:
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	subl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.L219
.L222:
	call	__locale_ctype_ptr
	movq	%rax, %rdx
	movq	16(%rbp), %rax
	movq	8(%rax), %rcx
	movl	-4(%rbp), %eax
	cltq
	addq	%rcx, %rax
	movzbl	(%rax), %eax
	movzbl	%al, %eax
	addq	$1, %rax
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	movsbl	%al, %eax
	andl	$8, %eax
	testl	%eax, %eax
	jne	.L220
	movq	16(%rbp), %rax
	movl	(%rax), %eax
	cmpl	%eax, -4(%rbp)
	jge	.L221
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-4(%rbp), %eax
	cltq
	addq	$1, %rax
	addq	%rdx, %rax
	movb	$0, (%rax)
.L221:
	movl	-4(%rbp), %eax
	leal	1(%rax), %edx
	movq	16(%rbp), %rax
	movl	%edx, 4(%rax)
	movl	$0, %eax
	jmp	.L218
.L220:
	subl	$1, -4(%rbp)
.L219:
	cmpl	$0, -4(%rbp)
	jns	.L222
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	movb	$0, (%rax)
	movq	16(%rbp), %rax
	movl	$0, 4(%rax)
	movl	$0, %eax
.L218:
	addq	$48, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	btrimws
	.def	btrimws;	.scl	2;	.type	32;	.endef
	.seh_proc	btrimws
btrimws:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$48, %rsp
	.seh_stackalloc	48
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	cmpq	$0, 16(%rbp)
	je	.L224
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L224
	movq	16(%rbp), %rax
	movl	(%rax), %edx
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, %edx
	jl	.L224
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	js	.L224
	movq	16(%rbp), %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	jg	.L225
.L224:
	movl	$-1, %eax
	jmp	.L226
.L225:
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	subl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.L227
.L232:
	call	__locale_ctype_ptr
	movq	%rax, %rdx
	movq	16(%rbp), %rax
	movq	8(%rax), %rcx
	movl	-4(%rbp), %eax
	cltq
	addq	%rcx, %rax
	movzbl	(%rax), %eax
	movzbl	%al, %eax
	addq	$1, %rax
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	movsbl	%al, %eax
	andl	$8, %eax
	testl	%eax, %eax
	jne	.L228
	movq	16(%rbp), %rax
	movl	(%rax), %eax
	cmpl	%eax, -4(%rbp)
	jge	.L229
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-4(%rbp), %eax
	cltq
	addq	$1, %rax
	addq	%rdx, %rax
	movb	$0, (%rax)
.L229:
	movl	-4(%rbp), %eax
	leal	1(%rax), %edx
	movq	16(%rbp), %rax
	movl	%edx, 4(%rax)
	movl	$0, -8(%rbp)
	jmp	.L230
.L231:
	addl	$1, -8(%rbp)
.L230:
	call	__locale_ctype_ptr
	movq	%rax, %rdx
	movq	16(%rbp), %rax
	movq	8(%rax), %rcx
	movl	-8(%rbp), %eax
	cltq
	addq	%rcx, %rax
	movzbl	(%rax), %eax
	movzbl	%al, %eax
	addq	$1, %rax
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	movsbl	%al, %eax
	andl	$8, %eax
	testl	%eax, %eax
	jne	.L231
	movl	-8(%rbp), %eax
	movl	%eax, %r8d
	movl	$0, %edx
	movq	16(%rbp), %rcx
	call	bdelete
	jmp	.L226
.L228:
	subl	$1, -4(%rbp)
.L227:
	cmpl	$0, -4(%rbp)
	jns	.L232
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	movb	$0, (%rax)
	movq	16(%rbp), %rax
	movl	$0, 4(%rax)
	movl	$0, %eax
.L226:
	addq	$48, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	biseqblk
	.def	biseqblk;	.scl	2;	.type	32;	.endef
	.seh_proc	biseqblk
biseqblk:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$32, %rsp
	.seh_stackalloc	32
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movq	%rdx, 24(%rbp)
	movl	%r8d, 32(%rbp)
	cmpl	$0, 32(%rbp)
	js	.L234
	cmpq	$0, 16(%rbp)
	je	.L234
	cmpq	$0, 24(%rbp)
	je	.L234
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L234
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	jns	.L235
.L234:
	movl	$-1, %eax
	jmp	.L236
.L235:
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, 32(%rbp)
	je	.L237
	movl	$0, %eax
	jmp	.L236
.L237:
	cmpl	$0, 32(%rbp)
	je	.L238
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	cmpq	%rax, 24(%rbp)
	jne	.L239
.L238:
	movl	$1, %eax
	jmp	.L236
.L239:
	movl	32(%rbp), %eax
	movslq	%eax, %rcx
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	movq	24(%rbp), %rdx
	movq	%rcx, %r8
	movq	%rax, %rcx
	call	memcmp
	testl	%eax, %eax
	sete	%al
	movzbl	%al, %eax
.L236:
	addq	$32, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	biseq
	.def	biseq;	.scl	2;	.type	32;	.endef
	.seh_proc	biseq
biseq:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$32, %rsp
	.seh_stackalloc	32
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movq	%rdx, 24(%rbp)
	cmpq	$0, 16(%rbp)
	je	.L241
	cmpq	$0, 24(%rbp)
	je	.L241
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L241
	movq	24(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L241
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	js	.L241
	movq	24(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	jns	.L242
.L241:
	movl	$-1, %eax
	jmp	.L243
.L242:
	movq	16(%rbp), %rax
	movl	4(%rax), %edx
	movq	24(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, %edx
	je	.L244
	movl	$0, %eax
	jmp	.L243
.L244:
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movq	24(%rbp), %rax
	movq	8(%rax), %rax
	cmpq	%rax, %rdx
	je	.L245
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	jne	.L246
.L245:
	movl	$1, %eax
	jmp	.L243
.L246:
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	movslq	%eax, %rcx
	movq	24(%rbp), %rax
	movq	8(%rax), %rdx
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rcx, %r8
	movq	%rax, %rcx
	call	memcmp
	testl	%eax, %eax
	sete	%al
	movzbl	%al, %eax
.L243:
	addq	$32, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	bisstemeqblk
	.def	bisstemeqblk;	.scl	2;	.type	32;	.endef
	.seh_proc	bisstemeqblk
bisstemeqblk:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$16, %rsp
	.seh_stackalloc	16
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movq	%rdx, 24(%rbp)
	movl	%r8d, 32(%rbp)
	cmpq	$0, 16(%rbp)
	je	.L248
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L248
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L248
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	js	.L248
	cmpq	$0, 24(%rbp)
	je	.L248
	cmpl	$0, 32(%rbp)
	jns	.L249
.L248:
	movl	$-1, %eax
	jmp	.L250
.L249:
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, 32(%rbp)
	jle	.L251
	movl	$0, %eax
	jmp	.L250
.L251:
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	cmpq	%rax, 24(%rbp)
	je	.L252
	cmpl	$0, 32(%rbp)
	jne	.L253
.L252:
	movl	$1, %eax
	jmp	.L250
.L253:
	movl	$0, -4(%rbp)
	jmp	.L254
.L256:
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-4(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %edx
	movl	-4(%rbp), %eax
	movslq	%eax, %rcx
	movq	24(%rbp), %rax
	addq	%rcx, %rax
	movzbl	(%rax), %eax
	cmpb	%al, %dl
	je	.L255
	movl	$0, %eax
	jmp	.L250
.L255:
	addl	$1, -4(%rbp)
.L254:
	movl	-4(%rbp), %eax
	cmpl	32(%rbp), %eax
	jl	.L256
	movl	$1, %eax
.L250:
	addq	$16, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	biseqcstr
	.def	biseqcstr;	.scl	2;	.type	32;	.endef
	.seh_proc	biseqcstr
biseqcstr:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$16, %rsp
	.seh_stackalloc	16
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movq	%rdx, 24(%rbp)
	cmpq	$0, 16(%rbp)
	je	.L258
	cmpq	$0, 24(%rbp)
	je	.L258
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L258
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	jns	.L259
.L258:
	movl	$-1, %eax
	jmp	.L260
.L259:
	movl	$0, -4(%rbp)
	jmp	.L261
.L264:
	movl	-4(%rbp), %eax
	movslq	%eax, %rdx
	movq	24(%rbp), %rax
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	testb	%al, %al
	je	.L262
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-4(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	movl	-4(%rbp), %edx
	movslq	%edx, %rcx
	movq	24(%rbp), %rdx
	addq	%rcx, %rdx
	movzbl	(%rdx), %edx
	cmpb	%dl, %al
	je	.L263
.L262:
	movl	$0, %eax
	jmp	.L260
.L263:
	addl	$1, -4(%rbp)
.L261:
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, -4(%rbp)
	jl	.L264
	movl	-4(%rbp), %eax
	movslq	%eax, %rdx
	movq	24(%rbp), %rax
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	testb	%al, %al
	sete	%al
	movzbl	%al, %eax
.L260:
	addq	$16, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	biseqcstrcaseless
	.def	biseqcstrcaseless;	.scl	2;	.type	32;	.endef
	.seh_proc	biseqcstrcaseless
biseqcstrcaseless:
	pushq	%rbp
	.seh_pushreg	%rbp
	pushq	%rbx
	.seh_pushreg	%rbx
	subq	$56, %rsp
	.seh_stackalloc	56
	leaq	128(%rsp), %rbp
	.seh_setframe	%rbp, 128
	.seh_endprologue
	movq	%rcx, -48(%rbp)
	movq	%rdx, -40(%rbp)
	cmpq	$0, -48(%rbp)
	je	.L266
	cmpq	$0, -40(%rbp)
	je	.L266
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L266
	movq	-48(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	jns	.L267
.L266:
	movl	$-1, %eax
	jmp	.L268
.L267:
	movl	$0, -84(%rbp)
	jmp	.L269
.L272:
	movl	-84(%rbp), %eax
	movslq	%eax, %rdx
	movq	-40(%rbp), %rax
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	testb	%al, %al
	je	.L270
	movq	-48(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-84(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	movl	-84(%rbp), %edx
	movslq	%edx, %rcx
	movq	-40(%rbp), %rdx
	addq	%rcx, %rdx
	movzbl	(%rdx), %edx
	cmpb	%dl, %al
	je	.L271
	movq	-48(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-84(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	movb	%al, -85(%rbp)
	call	__locale_ctype_ptr
	movzbl	-85(%rbp), %eax
	movl	%eax, %ecx
	call	tolower
	movl	%eax, %ebx
	movl	-84(%rbp), %eax
	movslq	%eax, %rdx
	movq	-40(%rbp), %rax
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	movb	%al, -86(%rbp)
	call	__locale_ctype_ptr
	movzbl	-86(%rbp), %eax
	movl	%eax, %ecx
	call	tolower
	movzbl	%al, %eax
	cmpl	%eax, %ebx
	je	.L271
.L270:
	movl	$0, %eax
	jmp	.L268
.L271:
	addl	$1, -84(%rbp)
.L269:
	movq	-48(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, -84(%rbp)
	jl	.L272
	movl	-84(%rbp), %eax
	movslq	%eax, %rdx
	movq	-40(%rbp), %rax
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	testb	%al, %al
	sete	%al
	movzbl	%al, %eax
.L268:
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	ret
	.seh_endproc
	.globl	bstrcmp
	.def	bstrcmp;	.scl	2;	.type	32;	.endef
	.seh_proc	bstrcmp
bstrcmp:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$16, %rsp
	.seh_stackalloc	16
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movq	%rdx, 24(%rbp)
	cmpq	$0, 16(%rbp)
	je	.L274
	cmpq	$0, 24(%rbp)
	je	.L274
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L274
	movq	24(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L274
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	js	.L274
	movq	24(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	jns	.L275
.L274:
	movl	$-32768, %eax
	jmp	.L276
.L275:
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	24(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, -8(%rbp)
	jle	.L277
	movq	24(%rbp), %rax
	movl	4(%rax), %eax
	movl	%eax, -8(%rbp)
.L277:
	movq	16(%rbp), %rax
	movl	4(%rax), %edx
	movq	24(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, %edx
	jne	.L278
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movq	24(%rbp), %rax
	movq	8(%rax), %rax
	cmpq	%rax, %rdx
	je	.L279
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	jne	.L278
.L279:
	movl	$0, %eax
	jmp	.L276
.L278:
	movl	$0, -4(%rbp)
	jmp	.L280
.L283:
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-4(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	movsbl	%al, %edx
	movq	24(%rbp), %rax
	movq	8(%rax), %rcx
	movl	-4(%rbp), %eax
	cltq
	addq	%rcx, %rax
	movzbl	(%rax), %eax
	movsbl	%al, %ecx
	movl	%edx, %eax
	subl	%ecx, %eax
	movl	%eax, -12(%rbp)
	cmpl	$0, -12(%rbp)
	je	.L281
	movl	-12(%rbp), %eax
	jmp	.L276
.L281:
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-4(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	testb	%al, %al
	jne	.L282
	movl	$0, %eax
	jmp	.L276
.L282:
	addl	$1, -4(%rbp)
.L280:
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jl	.L283
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, -8(%rbp)
	jge	.L284
	movl	$1, %eax
	jmp	.L276
.L284:
	movq	24(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, -8(%rbp)
	jge	.L285
	movl	$-1, %eax
	jmp	.L276
.L285:
	movl	$0, %eax
.L276:
	addq	$16, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	bstrncmp
	.def	bstrncmp;	.scl	2;	.type	32;	.endef
	.seh_proc	bstrncmp
bstrncmp:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$16, %rsp
	.seh_stackalloc	16
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movq	%rdx, 24(%rbp)
	movl	%r8d, 32(%rbp)
	cmpq	$0, 16(%rbp)
	je	.L287
	cmpq	$0, 24(%rbp)
	je	.L287
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L287
	movq	24(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L287
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	js	.L287
	movq	24(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	jns	.L288
.L287:
	movl	$-32768, %eax
	jmp	.L289
.L288:
	movl	32(%rbp), %eax
	movl	%eax, -8(%rbp)
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, -8(%rbp)
	jle	.L290
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	movl	%eax, -8(%rbp)
.L290:
	movq	24(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, -8(%rbp)
	jle	.L291
	movq	24(%rbp), %rax
	movl	4(%rax), %eax
	movl	%eax, -8(%rbp)
.L291:
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movq	24(%rbp), %rax
	movq	8(%rax), %rax
	cmpq	%rax, %rdx
	je	.L292
	movl	$0, -4(%rbp)
	jmp	.L293
.L296:
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-4(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	movsbl	%al, %edx
	movq	24(%rbp), %rax
	movq	8(%rax), %rcx
	movl	-4(%rbp), %eax
	cltq
	addq	%rcx, %rax
	movzbl	(%rax), %eax
	movsbl	%al, %ecx
	movl	%edx, %eax
	subl	%ecx, %eax
	movl	%eax, -12(%rbp)
	cmpl	$0, -12(%rbp)
	je	.L294
	movl	-12(%rbp), %eax
	jmp	.L289
.L294:
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-4(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	testb	%al, %al
	jne	.L295
	movl	$0, %eax
	jmp	.L289
.L295:
	addl	$1, -4(%rbp)
.L293:
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jl	.L296
.L292:
	movl	32(%rbp), %eax
	cmpl	-8(%rbp), %eax
	je	.L297
	movq	16(%rbp), %rax
	movl	4(%rax), %edx
	movq	24(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, %edx
	jne	.L298
.L297:
	movl	$0, %eax
	jmp	.L289
.L298:
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, -8(%rbp)
	jge	.L299
	movl	$1, %eax
	jmp	.L289
.L299:
	movl	$-1, %eax
.L289:
	addq	$16, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.section .rdata,"dr"
.LC0:
	.ascii "\0"
	.text
	.globl	bmidstr
	.def	bmidstr;	.scl	2;	.type	32;	.endef
	.seh_proc	bmidstr
bmidstr:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$32, %rsp
	.seh_stackalloc	32
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movl	%edx, 24(%rbp)
	movl	%r8d, 32(%rbp)
	cmpq	$0, 16(%rbp)
	je	.L301
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	js	.L301
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	jne	.L302
.L301:
	movl	$0, %eax
	jmp	.L303
.L302:
	cmpl	$0, 24(%rbp)
	jns	.L304
	movl	24(%rbp), %eax
	addl	%eax, 32(%rbp)
	movl	$0, 24(%rbp)
.L304:
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	subl	24(%rbp), %eax
	cmpl	%eax, 32(%rbp)
	jle	.L305
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	subl	24(%rbp), %eax
	movl	%eax, 32(%rbp)
.L305:
	cmpl	$0, 32(%rbp)
	jg	.L306
	leaq	.LC0(%rip), %rcx
	call	bfromcstr
	jmp	.L303
.L306:
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movl	24(%rbp), %eax
	cltq
	leaq	(%rdx,%rax), %rcx
	movl	32(%rbp), %eax
	movl	%eax, %edx
	call	blk2bstr
.L303:
	addq	$32, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	bdelete
	.def	bdelete;	.scl	2;	.type	32;	.endef
	.seh_proc	bdelete
bdelete:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$32, %rsp
	.seh_stackalloc	32
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movl	%edx, 24(%rbp)
	movl	%r8d, 32(%rbp)
	cmpl	$0, 24(%rbp)
	jns	.L308
	movl	24(%rbp), %eax
	addl	%eax, 32(%rbp)
	movl	$0, 24(%rbp)
.L308:
	cmpl	$0, 32(%rbp)
	js	.L309
	cmpq	$0, 16(%rbp)
	je	.L309
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L309
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	js	.L309
	movq	16(%rbp), %rax
	movl	(%rax), %edx
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, %edx
	jl	.L309
	movq	16(%rbp), %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	jg	.L310
.L309:
	movl	$-1, %eax
	jmp	.L311
.L310:
	cmpl	$0, 32(%rbp)
	jle	.L312
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, 24(%rbp)
	jge	.L312
	movl	24(%rbp), %edx
	movl	32(%rbp), %eax
	addl	%eax, %edx
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, %edx
	jl	.L313
	movq	16(%rbp), %rax
	movl	24(%rbp), %edx
	movl	%edx, 4(%rax)
	jmp	.L314
.L313:
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	movl	24(%rbp), %ecx
	movl	32(%rbp), %edx
	addl	%ecx, %edx
	subl	%edx, %eax
	testl	%eax, %eax
	jle	.L315
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	movl	24(%rbp), %ecx
	movl	32(%rbp), %edx
	addl	%ecx, %edx
	subl	%edx, %eax
	movslq	%eax, %rcx
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movl	24(%rbp), %eax
	movslq	%eax, %r8
	movl	32(%rbp), %eax
	cltq
	addq	%r8, %rax
	addq	%rax, %rdx
	movq	16(%rbp), %rax
	movq	8(%rax), %r8
	movl	24(%rbp), %eax
	cltq
	addq	%r8, %rax
	movq	%rcx, %r8
	movq	%rax, %rcx
	call	memmove
.L315:
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	subl	32(%rbp), %eax
	movl	%eax, %edx
	movq	16(%rbp), %rax
	movl	%edx, 4(%rax)
.L314:
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cltq
	addq	%rdx, %rax
	movb	$0, (%rax)
.L312:
	movl	$0, %eax
.L311:
	addq	$32, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	bdestroy
	.def	bdestroy;	.scl	2;	.type	32;	.endef
	.seh_proc	bdestroy
bdestroy:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$32, %rsp
	.seh_stackalloc	32
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	cmpq	$0, 16(%rbp)
	je	.L317
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	js	.L317
	movq	16(%rbp), %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	jle	.L317
	movq	16(%rbp), %rax
	movl	(%rax), %edx
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, %edx
	jl	.L317
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	jne	.L318
.L317:
	movl	$-1, %eax
	jmp	.L319
.L318:
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rcx
	call	free
	movq	16(%rbp), %rax
	movl	$-1, 4(%rax)
	movq	16(%rbp), %rax
	movl	$-1081, (%rax)
	movq	16(%rbp), %rax
	movq	$0, 8(%rax)
	movq	16(%rbp), %rcx
	call	free
	movl	$0, %eax
.L319:
	addq	$32, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	binstr
	.def	binstr;	.scl	2;	.type	32;	.endef
	.seh_proc	binstr
binstr:
	pushq	%rbp
	.seh_pushreg	%rbp
	pushq	%rdi
	.seh_pushreg	%rdi
	pushq	%rsi
	.seh_pushreg	%rsi
	pushq	%rbx
	.seh_pushreg	%rbx
	subq	$40, %rsp
	.seh_stackalloc	40
	leaq	128(%rsp), %rbp
	.seh_setframe	%rbp, 128
	.seh_endprologue
	movq	%rcx, -48(%rbp)
	movl	%edx, -40(%rbp)
	movq	%r8, -32(%rbp)
	cmpq	$0, -48(%rbp)
	je	.L321
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L321
	movq	-48(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	js	.L321
	cmpq	$0, -32(%rbp)
	je	.L321
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L321
	movq	-32(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	jns	.L322
.L321:
	movl	$-1, %eax
	jmp	.L323
.L322:
	movq	-48(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, -40(%rbp)
	jne	.L324
	movq	-32(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	jne	.L325
	movl	-40(%rbp), %eax
	jmp	.L323
.L325:
	movl	$-1, %eax
	jmp	.L323
.L324:
	movq	-48(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, -40(%rbp)
	jg	.L327
	cmpl	$0, -40(%rbp)
	jns	.L328
.L327:
	movl	$-1, %eax
	jmp	.L323
.L328:
	movq	-32(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	jne	.L329
	movl	-40(%rbp), %eax
	jmp	.L323
.L329:
	movq	-48(%rbp), %rax
	movl	4(%rax), %edx
	movq	-32(%rbp), %rax
	movl	4(%rax), %ecx
	movl	%edx, %eax
	subl	%ecx, %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	movl	-108(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jg	.L330
	movl	$-1, %eax
	jmp	.L323
.L330:
	movq	-48(%rbp), %rax
	movq	8(%rax), %rdx
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	cmpq	%rax, %rdx
	jne	.L331
	cmpl	$0, -40(%rbp)
	jne	.L331
	movl	$0, %eax
	jmp	.L323
.L331:
	movl	-40(%rbp), %ebx
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	-48(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-32(%rbp), %rax
	movl	4(%rax), %eax
	movl	%eax, -124(%rbp)
	movq	-120(%rbp), %rax
	movzbl	(%rax), %eax
	movb	%al, -125(%rbp)
	cmpl	$1, -124(%rbp)
	jne	.L332
	jmp	.L333
.L335:
	movslq	%ebx, %rax
	addq	%rdi, %rax
	movzbl	(%rax), %eax
	cmpb	%al, -125(%rbp)
	jne	.L334
	movl	%ebx, %eax
	jmp	.L323
.L334:
	addl	$1, %ebx
.L333:
	cmpl	-108(%rbp), %ebx
	jl	.L335
	movl	$-1, %eax
	jmp	.L323
.L332:
	movzbl	-125(%rbp), %esi
	movl	$0, -100(%rbp)
	movq	-48(%rbp), %rax
	movl	4(%rax), %eax
	subl	$1, %eax
	movl	%eax, -108(%rbp)
	movl	$-1, -104(%rbp)
	cmpl	-108(%rbp), %ebx
	jge	.L336
.L343:
	movslq	%ebx, %rax
	addq	%rdi, %rax
	movzbl	(%rax), %eax
	cmpb	%al, %sil
	je	.L337
	leal	1(%rbx), %eax
	cltq
	addq	%rdi, %rax
	movzbl	(%rax), %eax
	cmpb	%al, %sil
	je	.L338
	addl	$2, %ebx
	jmp	.L339
.L338:
	addl	$1, %ebx
.L337:
	cmpl	$0, -100(%rbp)
	jne	.L340
	movl	%ebx, -104(%rbp)
.L340:
	addl	$1, -100(%rbp)
	addl	$1, %ebx
	movl	-100(%rbp), %eax
	cmpl	-124(%rbp), %eax
	jge	.L345
	movl	-100(%rbp), %eax
	movslq	%eax, %rdx
	movq	-120(%rbp), %rax
	addq	%rdx, %rax
	movzbl	(%rax), %esi
	jmp	.L339
.L345:
	nop
	jmp	.L341
.L346:
	nop
.L341:
	movl	-104(%rbp), %edx
	movl	-100(%rbp), %eax
	addl	%edx, %eax
	cmpl	%eax, %ebx
	jne	.L342
	movl	-104(%rbp), %eax
	jmp	.L323
.L342:
	subl	-100(%rbp), %ebx
	movl	$0, -100(%rbp)
	movzbl	-125(%rbp), %esi
.L339:
	cmpl	-108(%rbp), %ebx
	jl	.L343
.L336:
	cmpl	-108(%rbp), %ebx
	jne	.L344
	movl	-100(%rbp), %eax
	addl	$1, %eax
	cmpl	%eax, -124(%rbp)
	jne	.L344
	movslq	%ebx, %rax
	addq	%rdi, %rax
	movzbl	(%rax), %eax
	cmpb	%al, %sil
	je	.L346
.L344:
	movl	$-1, %eax
.L323:
	addq	$40, %rsp
	popq	%rbx
	popq	%rsi
	popq	%rdi
	popq	%rbp
	ret
	.seh_endproc
	.globl	binstrr
	.def	binstrr;	.scl	2;	.type	32;	.endef
	.seh_proc	binstrr
binstrr:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$32, %rsp
	.seh_stackalloc	32
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movl	%edx, 24(%rbp)
	movq	%r8, 32(%rbp)
	cmpq	$0, 16(%rbp)
	je	.L348
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L348
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	js	.L348
	cmpq	$0, 32(%rbp)
	je	.L348
	movq	32(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L348
	movq	32(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	jns	.L349
.L348:
	movl	$-1, %eax
	jmp	.L350
.L349:
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, 24(%rbp)
	jne	.L351
	movq	32(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	jne	.L351
	movl	24(%rbp), %eax
	jmp	.L350
.L351:
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, 24(%rbp)
	jg	.L352
	cmpl	$0, 24(%rbp)
	jns	.L353
.L352:
	movl	$-1, %eax
	jmp	.L350
.L353:
	movq	32(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	jne	.L354
	movl	24(%rbp), %eax
	jmp	.L350
.L354:
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movq	32(%rbp), %rax
	movq	8(%rax), %rax
	cmpq	%rax, %rdx
	jne	.L355
	cmpl	$0, 24(%rbp)
	jne	.L355
	movq	32(%rbp), %rax
	movl	4(%rax), %edx
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, %edx
	jg	.L355
	movl	$0, %eax
	jmp	.L350
.L355:
	movl	24(%rbp), %eax
	movl	%eax, -8(%rbp)
	movq	16(%rbp), %rax
	movl	4(%rax), %edx
	movq	32(%rbp), %rax
	movl	4(%rax), %ecx
	movl	%edx, %eax
	subl	%ecx, %eax
	movl	%eax, -12(%rbp)
	cmpl	$0, -12(%rbp)
	jns	.L356
	movl	$-1, %eax
	jmp	.L350
.L356:
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.L357
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.L357:
	movl	$0, -4(%rbp)
	movq	32(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	32(%rbp), %rax
	movl	4(%rax), %eax
	movl	%eax, -12(%rbp)
.L362:
	movl	-4(%rbp), %eax
	movslq	%eax, %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movzbl	(%rax), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %eax
	addl	%ecx, %eax
	movslq	%eax, %rcx
	movq	-32(%rbp), %rax
	addq	%rcx, %rax
	movzbl	(%rax), %eax
	cmpb	%al, %dl
	jne	.L358
	addl	$1, -4(%rbp)
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jl	.L362
	movl	-8(%rbp), %eax
	jmp	.L350
.L358:
	subl	$1, -8(%rbp)
	cmpl	$0, -8(%rbp)
	js	.L364
	movl	$0, -4(%rbp)
	jmp	.L362
.L364:
	nop
	movl	$-1, %eax
.L350:
	addq	$32, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	binstrcaseless
	.def	binstrcaseless;	.scl	2;	.type	32;	.endef
	.seh_proc	binstrcaseless
binstrcaseless:
	pushq	%rbp
	.seh_pushreg	%rbp
	pushq	%rbx
	.seh_pushreg	%rbx
	subq	$88, %rsp
	.seh_stackalloc	88
	leaq	128(%rsp), %rbp
	.seh_setframe	%rbp, 128
	.seh_endprologue
	movq	%rcx, -16(%rbp)
	movl	%edx, -8(%rbp)
	movq	%r8, 0(%rbp)
	cmpq	$0, -16(%rbp)
	je	.L366
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L366
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	js	.L366
	cmpq	$0, 0(%rbp)
	je	.L366
	movq	0(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L366
	movq	0(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	jns	.L367
.L366:
	movl	$-1, %eax
	jmp	.L368
.L367:
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, -8(%rbp)
	jne	.L369
	movq	0(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	jne	.L370
	movl	-8(%rbp), %eax
	jmp	.L368
.L370:
	movl	$-1, %eax
	jmp	.L368
.L369:
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, -8(%rbp)
	jg	.L372
	cmpl	$0, -8(%rbp)
	jns	.L373
.L372:
	movl	$-1, %eax
	jmp	.L368
.L373:
	movq	0(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	jne	.L374
	movl	-8(%rbp), %eax
	jmp	.L368
.L374:
	movq	-16(%rbp), %rax
	movl	4(%rax), %edx
	movq	0(%rbp), %rax
	movl	4(%rax), %ecx
	movl	%edx, %eax
	subl	%ecx, %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jg	.L375
	movl	$-1, %eax
	jmp	.L368
.L375:
	movq	-16(%rbp), %rax
	movq	8(%rax), %rdx
	movq	0(%rbp), %rax
	movq	8(%rax), %rax
	cmpq	%rax, %rdx
	jne	.L376
	cmpl	$0, -8(%rbp)
	jne	.L376
	movl	$0, %eax
	jmp	.L368
.L376:
	movl	-8(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$0, -52(%rbp)
	movq	0(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	0(%rbp), %rax
	movl	4(%rax), %eax
	movl	%eax, -84(%rbp)
.L383:
	movl	-52(%rbp), %eax
	movslq	%eax, %rdx
	movq	-72(%rbp), %rax
	addq	%rdx, %rax
	movzbl	(%rax), %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %eax
	addl	%ecx, %eax
	movslq	%eax, %rcx
	movq	-80(%rbp), %rax
	addq	%rcx, %rax
	movzbl	(%rax), %eax
	cmpb	%al, %dl
	je	.L377
	movl	-52(%rbp), %eax
	movslq	%eax, %rdx
	movq	-72(%rbp), %rax
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	movb	%al, -85(%rbp)
	call	__locale_ctype_ptr
	movzbl	-85(%rbp), %eax
	movl	%eax, %ecx
	call	tolower
	movl	%eax, %ebx
	movl	-56(%rbp), %edx
	movl	-52(%rbp), %eax
	addl	%edx, %eax
	movslq	%eax, %rdx
	movq	-80(%rbp), %rax
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	movb	%al, -86(%rbp)
	call	__locale_ctype_ptr
	movzbl	-86(%rbp), %eax
	movl	%eax, %ecx
	call	tolower
	cmpl	%eax, %ebx
	jne	.L378
.L377:
	addl	$1, -52(%rbp)
	movl	-52(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jl	.L380
	movl	-56(%rbp), %eax
	jmp	.L368
.L378:
	addl	$1, -56(%rbp)
	movl	-56(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.L385
	movl	$0, -52(%rbp)
.L380:
	jmp	.L383
.L385:
	nop
	movl	$-1, %eax
.L368:
	addq	$88, %rsp
	popq	%rbx
	popq	%rbp
	ret
	.seh_endproc
	.globl	binstrrcaseless
	.def	binstrrcaseless;	.scl	2;	.type	32;	.endef
	.seh_proc	binstrrcaseless
binstrrcaseless:
	pushq	%rbp
	.seh_pushreg	%rbp
	pushq	%rbx
	.seh_pushreg	%rbx
	subq	$88, %rsp
	.seh_stackalloc	88
	leaq	128(%rsp), %rbp
	.seh_setframe	%rbp, 128
	.seh_endprologue
	movq	%rcx, -16(%rbp)
	movl	%edx, -8(%rbp)
	movq	%r8, 0(%rbp)
	cmpq	$0, -16(%rbp)
	je	.L387
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L387
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	js	.L387
	cmpq	$0, 0(%rbp)
	je	.L387
	movq	0(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L387
	movq	0(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	jns	.L388
.L387:
	movl	$-1, %eax
	jmp	.L389
.L388:
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, -8(%rbp)
	jne	.L390
	movq	0(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	jne	.L390
	movl	-8(%rbp), %eax
	jmp	.L389
.L390:
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, -8(%rbp)
	jg	.L391
	cmpl	$0, -8(%rbp)
	jns	.L392
.L391:
	movl	$-1, %eax
	jmp	.L389
.L392:
	movq	0(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	jne	.L393
	movl	-8(%rbp), %eax
	jmp	.L389
.L393:
	movq	-16(%rbp), %rax
	movq	8(%rax), %rdx
	movq	0(%rbp), %rax
	movq	8(%rax), %rax
	cmpq	%rax, %rdx
	jne	.L394
	cmpl	$0, -8(%rbp)
	jne	.L394
	movq	0(%rbp), %rax
	movl	4(%rax), %edx
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, %edx
	jg	.L394
	movl	$0, %eax
	jmp	.L389
.L394:
	movl	-8(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %edx
	movq	0(%rbp), %rax
	movl	4(%rax), %ecx
	movl	%edx, %eax
	subl	%ecx, %eax
	movl	%eax, -60(%rbp)
	cmpl	$0, -60(%rbp)
	jns	.L395
	movl	$-1, %eax
	jmp	.L389
.L395:
	movl	-60(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.L396
	movl	-60(%rbp), %eax
	movl	%eax, -56(%rbp)
.L396:
	movl	$0, -52(%rbp)
	movq	0(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	0(%rbp), %rax
	movl	4(%rax), %eax
	movl	%eax, -60(%rbp)
.L403:
	movl	-52(%rbp), %eax
	movslq	%eax, %rdx
	movq	-72(%rbp), %rax
	addq	%rdx, %rax
	movzbl	(%rax), %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %eax
	addl	%ecx, %eax
	movslq	%eax, %rcx
	movq	-80(%rbp), %rax
	addq	%rcx, %rax
	movzbl	(%rax), %eax
	cmpb	%al, %dl
	je	.L397
	movl	-52(%rbp), %eax
	movslq	%eax, %rdx
	movq	-72(%rbp), %rax
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	movb	%al, -81(%rbp)
	call	__locale_ctype_ptr
	movzbl	-81(%rbp), %eax
	movl	%eax, %ecx
	call	tolower
	movl	%eax, %ebx
	movl	-56(%rbp), %edx
	movl	-52(%rbp), %eax
	addl	%edx, %eax
	movslq	%eax, %rdx
	movq	-80(%rbp), %rax
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	movb	%al, -82(%rbp)
	call	__locale_ctype_ptr
	movzbl	-82(%rbp), %eax
	movl	%eax, %ecx
	call	tolower
	cmpl	%eax, %ebx
	jne	.L398
.L397:
	addl	$1, -52(%rbp)
	movl	-52(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jl	.L400
	movl	-56(%rbp), %eax
	jmp	.L389
.L398:
	subl	$1, -56(%rbp)
	cmpl	$0, -56(%rbp)
	js	.L405
	movl	$0, -52(%rbp)
.L400:
	jmp	.L403
.L405:
	nop
	movl	$-1, %eax
.L389:
	addq	$88, %rsp
	popq	%rbx
	popq	%rbp
	ret
	.seh_endproc
	.globl	bstrchrp
	.def	bstrchrp;	.scl	2;	.type	32;	.endef
	.seh_proc	bstrchrp
bstrchrp:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$48, %rsp
	.seh_stackalloc	48
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movl	%edx, 24(%rbp)
	movl	%r8d, 32(%rbp)
	cmpq	$0, 16(%rbp)
	je	.L407
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L407
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, 32(%rbp)
	jge	.L407
	cmpl	$0, 32(%rbp)
	jns	.L408
.L407:
	movl	$-1, %eax
	jmp	.L409
.L408:
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	subl	32(%rbp), %eax
	movslq	%eax, %r8
	movl	24(%rbp), %eax
	movzbl	%al, %eax
	movq	16(%rbp), %rdx
	movq	8(%rdx), %rcx
	movl	32(%rbp), %edx
	movslq	%edx, %rdx
	addq	%rdx, %rcx
	movl	%eax, %edx
	call	memchr
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L410
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movq	-8(%rbp), %rax
	subq	%rdx, %rax
	jmp	.L409
.L410:
	movl	$-1, %eax
.L409:
	addq	$48, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	bstrrchrp
	.def	bstrrchrp;	.scl	2;	.type	32;	.endef
	.seh_proc	bstrrchrp
bstrrchrp:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$16, %rsp
	.seh_stackalloc	16
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movl	%edx, 24(%rbp)
	movl	%r8d, 32(%rbp)
	cmpq	$0, 16(%rbp)
	je	.L412
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L412
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, 32(%rbp)
	jge	.L412
	cmpl	$0, 32(%rbp)
	jns	.L413
.L412:
	movl	$-1, %eax
	jmp	.L414
.L413:
	movl	32(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	.L415
.L417:
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-4(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	movl	24(%rbp), %edx
	cmpb	%dl, %al
	jne	.L416
	movl	-4(%rbp), %eax
	jmp	.L414
.L416:
	subl	$1, -4(%rbp)
.L415:
	cmpl	$0, -4(%rbp)
	jns	.L417
	movl	$-1, %eax
.L414:
	addq	$16, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.def	buildCharField;	.scl	3;	.type	32;	.endef
	.seh_proc	buildCharField
buildCharField:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$48, %rsp
	.seh_stackalloc	48
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movq	%rdx, 24(%rbp)
	cmpq	$0, 24(%rbp)
	je	.L419
	movq	24(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L419
	movq	24(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	jg	.L420
.L419:
	movl	$-1, %eax
	jmp	.L421
.L420:
	movq	16(%rbp), %rax
	movl	$32, %r8d
	movl	$0, %edx
	movq	%rax, %rcx
	call	memset
	movl	$0, -4(%rbp)
	jmp	.L422
.L423:
	movq	24(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-4(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	movzbl	%al, %eax
	movl	%eax, -8(%rbp)
	movl	-8(%rbp), %eax
	shrl	$3, %eax
	movl	%eax, %edx
	movq	16(%rbp), %rax
	movl	%edx, %edx
	movzbl	(%rax,%rdx), %edx
	movl	-8(%rbp), %eax
	andl	$7, %eax
	movl	$1, %r8d
	movl	%eax, %ecx
	salq	%cl, %r8
	movq	%r8, %rax
	movl	%eax, %r8d
	movl	-8(%rbp), %eax
	shrl	$3, %eax
	movl	%eax, %ecx
	orl	%r8d, %edx
	movq	16(%rbp), %rax
	movl	%ecx, %ecx
	movb	%dl, (%rax,%rcx)
	addl	$1, -4(%rbp)
.L422:
	movq	24(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, -4(%rbp)
	jl	.L423
	movl	$0, %eax
.L421:
	addq	$48, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.def	invertCharField;	.scl	3;	.type	32;	.endef
	.seh_proc	invertCharField
invertCharField:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$16, %rsp
	.seh_stackalloc	16
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movl	$0, -4(%rbp)
	jmp	.L425
.L426:
	movq	16(%rbp), %rdx
	movl	-4(%rbp), %eax
	cltq
	movzbl	(%rdx,%rax), %eax
	notl	%eax
	movl	%eax, %ecx
	movq	16(%rbp), %rdx
	movl	-4(%rbp), %eax
	cltq
	movb	%cl, (%rdx,%rax)
	addl	$1, -4(%rbp)
.L425:
	cmpl	$31, -4(%rbp)
	jle	.L426
	nop
	nop
	addq	$16, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.def	binchrCF;	.scl	3;	.type	32;	.endef
	.seh_proc	binchrCF
binchrCF:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$16, %rsp
	.seh_stackalloc	16
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movl	%edx, 24(%rbp)
	movl	%r8d, 32(%rbp)
	movq	%r9, 40(%rbp)
	movl	32(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	.L428
.L431:
	movl	-4(%rbp), %eax
	movslq	%eax, %rdx
	movq	16(%rbp), %rax
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	movb	%al, -5(%rbp)
	movzbl	-5(%rbp), %eax
	shrb	$3, %al
	movzbl	%al, %eax
	movq	40(%rbp), %rdx
	cltq
	movzbl	(%rdx,%rax), %eax
	movzbl	%al, %edx
	movzbl	-5(%rbp), %eax
	andl	$7, %eax
	movl	%eax, %ecx
	sarq	%cl, %rdx
	movq	%rdx, %rax
	andl	$1, %eax
	testq	%rax, %rax
	je	.L429
	movl	-4(%rbp), %eax
	jmp	.L430
.L429:
	addl	$1, -4(%rbp)
.L428:
	movl	-4(%rbp), %eax
	cmpl	24(%rbp), %eax
	jl	.L431
	movl	$-1, %eax
.L430:
	addq	$16, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	binchr
	.def	binchr;	.scl	2;	.type	32;	.endef
	.seh_proc	binchr
binchr:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$64, %rsp
	.seh_stackalloc	64
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movl	%edx, 24(%rbp)
	movq	%r8, 32(%rbp)
	cmpl	$0, 24(%rbp)
	js	.L433
	cmpq	$0, 16(%rbp)
	je	.L433
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L433
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, 24(%rbp)
	jl	.L434
.L433:
	movl	$-1, %eax
	jmp	.L438
.L434:
	movq	32(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	$1, %eax
	jne	.L436
	movq	32(%rbp), %rax
	movq	8(%rax), %rax
	movzbl	(%rax), %eax
	movzbl	%al, %eax
	movl	24(%rbp), %edx
	movl	%edx, %r8d
	movl	%eax, %edx
	movq	16(%rbp), %rcx
	call	bstrchrp
	jmp	.L438
.L436:
	movq	32(%rbp), %rdx
	leaq	-32(%rbp), %rax
	movq	%rax, %rcx
	call	buildCharField
	testl	%eax, %eax
	jns	.L437
	movl	$-1, %eax
	jmp	.L438
.L437:
	movq	16(%rbp), %rax
	movl	4(%rax), %edx
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	leaq	-32(%rbp), %r8
	movl	24(%rbp), %ecx
	movq	%r8, %r9
	movl	%ecx, %r8d
	movq	%rax, %rcx
	call	binchrCF
.L438:
	addq	$64, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.def	binchrrCF;	.scl	3;	.type	32;	.endef
	.seh_proc	binchrrCF
binchrrCF:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$16, %rsp
	.seh_stackalloc	16
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movl	%edx, 24(%rbp)
	movq	%r8, 32(%rbp)
	movl	24(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	.L440
.L443:
	movl	-4(%rbp), %eax
	movslq	%eax, %rdx
	movq	16(%rbp), %rax
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	movzbl	%al, %eax
	movl	%eax, -8(%rbp)
	movl	-8(%rbp), %eax
	shrl	$3, %eax
	movl	%eax, %edx
	movq	32(%rbp), %rax
	movl	%edx, %edx
	movzbl	(%rax,%rdx), %eax
	movzbl	%al, %edx
	movl	-8(%rbp), %eax
	andl	$7, %eax
	movl	%eax, %ecx
	sarq	%cl, %rdx
	movq	%rdx, %rax
	andl	$1, %eax
	testq	%rax, %rax
	je	.L441
	movl	-4(%rbp), %eax
	jmp	.L442
.L441:
	subl	$1, -4(%rbp)
.L440:
	cmpl	$0, -4(%rbp)
	jns	.L443
	movl	$-1, %eax
.L442:
	addq	$16, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	binchrr
	.def	binchrr;	.scl	2;	.type	32;	.endef
	.seh_proc	binchrr
binchrr:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$64, %rsp
	.seh_stackalloc	64
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movl	%edx, 24(%rbp)
	movq	%r8, 32(%rbp)
	cmpl	$0, 24(%rbp)
	js	.L445
	cmpq	$0, 16(%rbp)
	je	.L445
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L445
	cmpq	$0, 32(%rbp)
	je	.L445
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, 24(%rbp)
	jle	.L446
.L445:
	movl	$-1, %eax
	jmp	.L451
.L446:
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, 24(%rbp)
	jne	.L448
	subl	$1, 24(%rbp)
.L448:
	movq	32(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	$1, %eax
	jne	.L449
	movq	32(%rbp), %rax
	movq	8(%rax), %rax
	movzbl	(%rax), %eax
	movzbl	%al, %eax
	movl	24(%rbp), %edx
	movl	%edx, %r8d
	movl	%eax, %edx
	movq	16(%rbp), %rcx
	call	bstrrchrp
	jmp	.L451
.L449:
	movq	32(%rbp), %rdx
	leaq	-32(%rbp), %rax
	movq	%rax, %rcx
	call	buildCharField
	testl	%eax, %eax
	jns	.L450
	movl	$-1, %eax
	jmp	.L451
.L450:
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	leaq	-32(%rbp), %rcx
	movl	24(%rbp), %edx
	movq	%rcx, %r8
	movq	%rax, %rcx
	call	binchrrCF
.L451:
	addq	$64, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	bninchr
	.def	bninchr;	.scl	2;	.type	32;	.endef
	.seh_proc	bninchr
bninchr:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$64, %rsp
	.seh_stackalloc	64
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movl	%edx, 24(%rbp)
	movq	%r8, 32(%rbp)
	cmpl	$0, 24(%rbp)
	js	.L453
	cmpq	$0, 16(%rbp)
	je	.L453
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L453
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, 24(%rbp)
	jl	.L454
.L453:
	movl	$-1, %eax
	jmp	.L457
.L454:
	movq	32(%rbp), %rdx
	leaq	-32(%rbp), %rax
	movq	%rax, %rcx
	call	buildCharField
	testl	%eax, %eax
	jns	.L456
	movl	$-1, %eax
	jmp	.L457
.L456:
	leaq	-32(%rbp), %rax
	movq	%rax, %rcx
	call	invertCharField
	movq	16(%rbp), %rax
	movl	4(%rax), %edx
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	leaq	-32(%rbp), %r8
	movl	24(%rbp), %ecx
	movq	%r8, %r9
	movl	%ecx, %r8d
	movq	%rax, %rcx
	call	binchrCF
.L457:
	addq	$64, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	bninchrr
	.def	bninchrr;	.scl	2;	.type	32;	.endef
	.seh_proc	bninchrr
bninchrr:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$64, %rsp
	.seh_stackalloc	64
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movl	%edx, 24(%rbp)
	movq	%r8, 32(%rbp)
	cmpl	$0, 24(%rbp)
	js	.L459
	cmpq	$0, 16(%rbp)
	je	.L459
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L459
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, 24(%rbp)
	jle	.L460
.L459:
	movl	$-1, %eax
	jmp	.L464
.L460:
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, 24(%rbp)
	jne	.L462
	subl	$1, 24(%rbp)
.L462:
	movq	32(%rbp), %rdx
	leaq	-32(%rbp), %rax
	movq	%rax, %rcx
	call	buildCharField
	testl	%eax, %eax
	jns	.L463
	movl	$-1, %eax
	jmp	.L464
.L463:
	leaq	-32(%rbp), %rax
	movq	%rax, %rcx
	call	invertCharField
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	leaq	-32(%rbp), %rcx
	movl	24(%rbp), %edx
	movq	%rcx, %r8
	movq	%rax, %rcx
	call	binchrrCF
.L464:
	addq	$64, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	bsetstr
	.def	bsetstr;	.scl	2;	.type	32;	.endef
	.seh_proc	bsetstr
bsetstr:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$64, %rsp
	.seh_stackalloc	64
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movl	%edx, 24(%rbp)
	movq	%r8, 32(%rbp)
	movl	%r9d, %eax
	movb	%al, 40(%rbp)
	movq	32(%rbp), %rax
	movq	%rax, -16(%rbp)
	cmpl	$0, 24(%rbp)
	js	.L466
	cmpq	$0, 16(%rbp)
	je	.L466
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	js	.L466
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L466
	movq	16(%rbp), %rax
	movl	(%rax), %edx
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, %edx
	jl	.L466
	movq	16(%rbp), %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	jg	.L467
.L466:
	movl	$-1, %eax
	jmp	.L468
.L467:
	cmpq	$0, 32(%rbp)
	je	.L469
	movq	32(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	js	.L470
	movq	32(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	jne	.L469
.L470:
	movl	$-1, %eax
	jmp	.L468
.L469:
	movl	24(%rbp), %eax
	movl	%eax, -4(%rbp)
	cmpq	$0, -16(%rbp)
	je	.L471
	movq	32(%rbp), %rax
	movq	8(%rax), %rdx
	movq	16(%rbp), %rax
	movq	8(%rax), %rcx
	movq	%rdx, %rax
	subq	%rcx, %rax
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	js	.L472
	movq	16(%rbp), %rax
	movl	(%rax), %eax
	cltq
	cmpq	%rax, -24(%rbp)
	jge	.L472
	movq	32(%rbp), %rax
	movq	%rax, %rcx
	call	bstrcpy
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.L472
	movl	$-1, %eax
	jmp	.L468
.L472:
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	addl	%eax, -4(%rbp)
.L471:
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, %edx
	movq	16(%rbp), %rcx
	call	balloc
	testl	%eax, %eax
	je	.L473
	movq	-16(%rbp), %rax
	cmpq	32(%rbp), %rax
	je	.L474
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	call	bdestroy
.L474:
	movl	$-1, %eax
	jmp	.L468
.L473:
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	movl	%eax, -8(%rbp)
	movl	24(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jle	.L475
	movq	16(%rbp), %rax
	movl	4(%rax), %edx
	movl	24(%rbp), %eax
	subl	%edx, %eax
	movslq	%eax, %r8
	movzbl	40(%rbp), %eax
	movq	16(%rbp), %rdx
	movq	8(%rdx), %rcx
	movq	16(%rbp), %rdx
	movl	4(%rdx), %edx
	movslq	%edx, %rdx
	addq	%rdx, %rcx
	movl	%eax, %edx
	call	memset
	movl	24(%rbp), %eax
	movl	%eax, -8(%rbp)
.L475:
	cmpq	$0, -16(%rbp)
	je	.L476
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	jle	.L477
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movslq	%eax, %r8
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	16(%rbp), %rdx
	movq	8(%rdx), %rcx
	movl	24(%rbp), %edx
	movslq	%edx, %rdx
	addq	%rdx, %rcx
	movq	%rax, %rdx
	call	memmove
.L477:
	movq	-16(%rbp), %rax
	cmpq	32(%rbp), %rax
	je	.L476
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	call	bdestroy
.L476:
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jle	.L478
	movl	-4(%rbp), %eax
	movl	%eax, -8(%rbp)
.L478:
	movq	16(%rbp), %rax
	movl	-8(%rbp), %edx
	movl	%edx, 4(%rax)
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-8(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movb	$0, (%rax)
	movl	$0, %eax
.L468:
	addq	$64, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	binsertblk
	.def	binsertblk;	.scl	2;	.type	32;	.endef
	.seh_proc	binsertblk
binsertblk:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$64, %rsp
	.seh_stackalloc	64
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movl	%edx, 24(%rbp)
	movq	%r8, 32(%rbp)
	movl	%r9d, 40(%rbp)
	movl	48(%rbp), %eax
	movb	%al, -20(%rbp)
	movq	32(%rbp), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, 16(%rbp)
	je	.L480
	cmpq	$0, 32(%rbp)
	je	.L480
	cmpl	$0, 24(%rbp)
	js	.L480
	cmpl	$0, 40(%rbp)
	js	.L480
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	js	.L480
	movq	16(%rbp), %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	jle	.L480
	movq	16(%rbp), %rax
	movl	(%rax), %edx
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, %edx
	jge	.L481
.L480:
	movl	$-1, %eax
	jmp	.L482
.L481:
	movq	16(%rbp), %rax
	movl	4(%rax), %edx
	movl	40(%rbp), %eax
	addl	%edx, %eax
	movl	%eax, -12(%rbp)
	movl	24(%rbp), %edx
	movl	40(%rbp), %eax
	addl	%edx, %eax
	movl	%eax, -16(%rbp)
	movl	-12(%rbp), %eax
	orl	-16(%rbp), %eax
	testl	%eax, %eax
	jns	.L483
	movl	$-1, %eax
	jmp	.L482
.L483:
	movl	40(%rbp), %eax
	movslq	%eax, %rdx
	movq	32(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, %rdx
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	cmpq	%rax, %rdx
	jb	.L484
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movq	16(%rbp), %rax
	movl	(%rax), %eax
	cltq
	addq	%rdx, %rax
	movq	%rax, %rdx
	movq	32(%rbp), %rax
	cmpq	%rax, %rdx
	jbe	.L484
	movl	40(%rbp), %eax
	cltq
	movq	%rax, %rcx
	call	malloc
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.L485
	movl	$-1, %eax
	jmp	.L482
.L485:
	movl	40(%rbp), %eax
	movslq	%eax, %rcx
	movq	32(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	%rcx, %r8
	movq	%rax, %rcx
	call	memcpy
.L484:
	movl	-16(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jle	.L486
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, %edx
	movq	16(%rbp), %rcx
	call	balloc
	testl	%eax, %eax
	je	.L487
	movq	-8(%rbp), %rax
	cmpq	32(%rbp), %rax
	je	.L488
	movq	-8(%rbp), %rax
	movq	%rax, %rcx
	call	free
.L488:
	movl	$-1, %eax
	jmp	.L482
.L487:
	movq	16(%rbp), %rax
	movl	4(%rax), %edx
	movl	24(%rbp), %eax
	subl	%edx, %eax
	movslq	%eax, %r8
	movzbl	-20(%rbp), %eax
	movq	16(%rbp), %rdx
	movq	8(%rdx), %rcx
	movq	16(%rbp), %rdx
	movl	4(%rdx), %edx
	movslq	%edx, %rdx
	addq	%rdx, %rcx
	movl	%eax, %edx
	call	memset
	movq	16(%rbp), %rax
	movl	-16(%rbp), %edx
	movl	%edx, 4(%rax)
	jmp	.L489
.L486:
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, %edx
	movq	16(%rbp), %rcx
	call	balloc
	testl	%eax, %eax
	je	.L490
	movq	-8(%rbp), %rax
	cmpq	32(%rbp), %rax
	je	.L491
	movq	-8(%rbp), %rax
	movq	%rax, %rcx
	call	free
.L491:
	movl	$-1, %eax
	jmp	.L482
.L490:
	movl	-12(%rbp), %eax
	subl	-16(%rbp), %eax
	testl	%eax, %eax
	jle	.L492
	movl	-12(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	%eax, %rcx
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movl	24(%rbp), %eax
	cltq
	addq	%rax, %rdx
	movq	16(%rbp), %rax
	movq	8(%rax), %r8
	movl	-16(%rbp), %eax
	cltq
	addq	%r8, %rax
	movq	%rcx, %r8
	movq	%rax, %rcx
	call	memmove
.L492:
	movq	16(%rbp), %rax
	movl	-12(%rbp), %edx
	movl	%edx, 4(%rax)
.L489:
	cmpl	$0, 40(%rbp)
	jle	.L493
	movl	40(%rbp), %eax
	movslq	%eax, %rdx
	movq	16(%rbp), %rax
	movq	8(%rax), %rcx
	movl	24(%rbp), %eax
	cltq
	addq	%rax, %rcx
	movq	-8(%rbp), %rax
	movq	%rdx, %r8
	movq	%rax, %rdx
	call	memmove
.L493:
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cltq
	addq	%rdx, %rax
	movb	$0, (%rax)
	movq	-8(%rbp), %rax
	cmpq	32(%rbp), %rax
	je	.L494
	movq	-8(%rbp), %rax
	movq	%rax, %rcx
	call	free
.L494:
	movl	$0, %eax
.L482:
	addq	$64, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	binsert
	.def	binsert;	.scl	2;	.type	32;	.endef
	.seh_proc	binsert
binsert:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$48, %rsp
	.seh_stackalloc	48
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movl	%edx, 24(%rbp)
	movq	%r8, 32(%rbp)
	movl	%r9d, %eax
	movb	%al, 40(%rbp)
	cmpq	$0, 32(%rbp)
	je	.L496
	movq	32(%rbp), %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	jle	.L497
	movq	32(%rbp), %rax
	movl	4(%rax), %edx
	movq	32(%rbp), %rax
	movl	(%rax), %eax
	cmpl	%eax, %edx
	jle	.L497
.L496:
	movl	$-1, %eax
	jmp	.L498
.L497:
	movzbl	40(%rbp), %edx
	movq	32(%rbp), %rax
	movl	4(%rax), %r8d
	movq	32(%rbp), %rax
	movq	8(%rax), %rcx
	movl	24(%rbp), %eax
	movl	%edx, 32(%rsp)
	movl	%r8d, %r9d
	movq	%rcx, %r8
	movl	%eax, %edx
	movq	16(%rbp), %rcx
	call	binsertblk
.L498:
	addq	$48, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	breplace
	.def	breplace;	.scl	2;	.type	32;	.endef
	.seh_proc	breplace
breplace:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$80, %rsp
	.seh_stackalloc	80
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movl	%edx, 24(%rbp)
	movl	%r8d, 32(%rbp)
	movq	%r9, 40(%rbp)
	movl	48(%rbp), %eax
	movb	%al, -36(%rbp)
	movq	40(%rbp), %rax
	movq	%rax, -8(%rbp)
	cmpl	$0, 24(%rbp)
	js	.L500
	cmpl	$0, 32(%rbp)
	jns	.L501
.L500:
	movl	$-1, %eax
	jmp	.L502
.L501:
	movl	$2147483647, %eax
	subl	32(%rbp), %eax
	cmpl	%eax, 24(%rbp)
	jle	.L503
	movl	$-1, %eax
	jmp	.L502
.L503:
	movl	24(%rbp), %edx
	movl	32(%rbp), %eax
	addl	%edx, %eax
	movl	%eax, -12(%rbp)
	cmpq	$0, 16(%rbp)
	je	.L504
	cmpq	$0, 40(%rbp)
	je	.L504
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L504
	movq	40(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L504
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	js	.L504
	movq	40(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	js	.L504
	movq	16(%rbp), %rax
	movl	(%rax), %edx
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, %edx
	jl	.L504
	movq	16(%rbp), %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	jg	.L505
.L504:
	movl	$-1, %eax
	jmp	.L502
.L505:
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, -12(%rbp)
	jl	.L506
	movzbl	-36(%rbp), %ecx
	movq	40(%rbp), %rdx
	movl	24(%rbp), %eax
	movl	%ecx, %r9d
	movq	%rdx, %r8
	movl	%eax, %edx
	movq	16(%rbp), %rcx
	call	bsetstr
	movl	%eax, -28(%rbp)
	cmpl	$0, -28(%rbp)
	jns	.L507
	movl	-28(%rbp), %eax
	jmp	.L502
.L507:
	movq	40(%rbp), %rax
	movl	4(%rax), %edx
	movl	24(%rbp), %eax
	addl	%eax, %edx
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, %edx
	jge	.L508
	movq	40(%rbp), %rax
	movl	4(%rax), %edx
	movl	24(%rbp), %eax
	addl	%eax, %edx
	movq	16(%rbp), %rax
	movl	%edx, 4(%rax)
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cltq
	addq	%rdx, %rax
	movb	$0, (%rax)
.L508:
	movl	-28(%rbp), %eax
	jmp	.L502
.L506:
	movq	40(%rbp), %rax
	movq	8(%rax), %rdx
	movq	16(%rbp), %rax
	movq	8(%rax), %rcx
	movq	%rdx, %rax
	subq	%rcx, %rax
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	js	.L509
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cltq
	cmpq	%rax, -24(%rbp)
	jge	.L509
	movq	40(%rbp), %rax
	movq	%rax, %rcx
	call	bstrcpy
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.L509
	movl	$-1, %eax
	jmp	.L502
.L509:
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, 32(%rbp)
	jge	.L510
	movq	16(%rbp), %rax
	movl	4(%rax), %edx
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	addl	%edx, %eax
	subl	32(%rbp), %eax
	movl	%eax, %edx
	movq	16(%rbp), %rcx
	call	balloc
	testl	%eax, %eax
	je	.L510
	movq	-8(%rbp), %rax
	cmpq	40(%rbp), %rax
	je	.L511
	movq	-8(%rbp), %rax
	movq	%rax, %rcx
	call	bdestroy
.L511:
	movl	$-1, %eax
	jmp	.L502
.L510:
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, 32(%rbp)
	je	.L512
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	movl	24(%rbp), %ecx
	movl	32(%rbp), %edx
	addl	%ecx, %edx
	subl	%edx, %eax
	movslq	%eax, %rcx
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movl	24(%rbp), %eax
	movslq	%eax, %r8
	movl	32(%rbp), %eax
	cltq
	addq	%r8, %rax
	addq	%rax, %rdx
	movq	16(%rbp), %rax
	movq	8(%rax), %r8
	movl	24(%rbp), %eax
	movslq	%eax, %r9
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	cltq
	addq	%r9, %rax
	addq	%r8, %rax
	movq	%rcx, %r8
	movq	%rax, %rcx
	call	memmove
.L512:
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movslq	%eax, %r8
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	16(%rbp), %rdx
	movq	8(%rdx), %rcx
	movl	24(%rbp), %edx
	movslq	%edx, %rdx
	addq	%rdx, %rcx
	movq	%rax, %rdx
	call	memcpy
	movq	16(%rbp), %rax
	movl	4(%rax), %edx
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	subl	32(%rbp), %eax
	addl	%eax, %edx
	movq	16(%rbp), %rax
	movl	%edx, 4(%rax)
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cltq
	addq	%rdx, %rax
	movb	$0, (%rax)
	movq	-8(%rbp), %rax
	cmpq	40(%rbp), %rax
	je	.L513
	movq	-8(%rbp), %rax
	movq	%rax, %rcx
	call	bdestroy
.L513:
	movl	$0, %eax
.L502:
	addq	$80, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.def	findreplaceengine;	.scl	3;	.type	32;	.endef
	.seh_proc	findreplaceengine
findreplaceengine:
	pushq	%rbp
	.seh_pushreg	%rbp
	subq	$256, %rsp
	.seh_stackalloc	256
	leaq	128(%rsp), %rbp
	.seh_setframe	%rbp, 128
	.seh_endprologue
	movq	%rcx, 144(%rbp)
	movq	%rdx, 152(%rbp)
	movq	%r8, 160(%rbp)
	movl	%r9d, 168(%rbp)
	movq	152(%rbp), %rax
	movq	%rax, 88(%rbp)
	movq	160(%rbp), %rax
	movq	%rax, 80(%rbp)
	cmpq	$0, 144(%rbp)
	je	.L515
	movq	144(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L515
	cmpq	$0, 152(%rbp)
	je	.L515
	movq	152(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L515
	cmpq	$0, 160(%rbp)
	je	.L515
	movq	160(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L515
	cmpl	$0, 168(%rbp)
	js	.L515
	movq	152(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	jle	.L515
	movq	144(%rbp), %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	jle	.L515
	movq	144(%rbp), %rax
	movl	4(%rax), %edx
	movq	144(%rbp), %rax
	movl	(%rax), %eax
	cmpl	%eax, %edx
	jg	.L515
	movq	144(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	js	.L515
	movq	160(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	jns	.L516
.L515:
	movl	$-1, %eax
	jmp	.L552
.L516:
	movq	144(%rbp), %rax
	movl	4(%rax), %edx
	movq	152(%rbp), %rax
	movl	4(%rax), %ecx
	movl	%edx, %eax
	subl	%ecx, %eax
	cmpl	%eax, 168(%rbp)
	jle	.L518
	movl	$0, %eax
	jmp	.L552
.L518:
	movq	152(%rbp), %rax
	movq	8(%rax), %rdx
	movq	144(%rbp), %rax
	movq	8(%rax), %rcx
	movq	%rdx, %rax
	subq	%rcx, %rax
	movq	%rax, 72(%rbp)
	movq	152(%rbp), %rax
	movl	4(%rax), %edx
	movl	168(%rbp), %eax
	subl	%edx, %eax
	cltq
	cmpq	%rax, 72(%rbp)
	jle	.L519
	movq	144(%rbp), %rax
	movl	4(%rax), %eax
	cltq
	cmpq	%rax, 72(%rbp)
	jge	.L519
	movq	152(%rbp), %rax
	movq	%rax, %rcx
	call	bstrcpy
	movq	%rax, 88(%rbp)
	cmpq	$0, 88(%rbp)
	jne	.L519
	movl	$-1, %eax
	jmp	.L552
.L519:
	movq	160(%rbp), %rax
	movq	8(%rax), %rdx
	movq	144(%rbp), %rax
	movq	8(%rax), %rcx
	movq	%rdx, %rax
	subq	%rcx, %rax
	movq	%rax, 72(%rbp)
	movq	160(%rbp), %rax
	movl	4(%rax), %edx
	movl	168(%rbp), %eax
	subl	%edx, %eax
	cltq
	cmpq	%rax, 72(%rbp)
	jle	.L520
	movq	144(%rbp), %rax
	movl	4(%rax), %eax
	cltq
	cmpq	%rax, 72(%rbp)
	jge	.L520
	movq	160(%rbp), %rax
	movq	%rax, %rcx
	call	bstrcpy
	movq	%rax, 80(%rbp)
	cmpq	$0, 80(%rbp)
	jne	.L520
	movq	88(%rbp), %rax
	cmpq	152(%rbp), %rax
	je	.L521
	movq	88(%rbp), %rax
	movq	%rax, %rcx
	call	bdestroy
.L521:
	movl	$-1, %eax
	jmp	.L552
.L520:
	movq	88(%rbp), %rax
	movl	4(%rax), %edx
	movq	80(%rbp), %rax
	movl	4(%rax), %ecx
	movl	%edx, %eax
	subl	%ecx, %eax
	movl	%eax, 68(%rbp)
	cmpl	$0, 68(%rbp)
	jne	.L522
	jmp	.L523
.L524:
	movq	80(%rbp), %rax
	movl	4(%rax), %eax
	movslq	%eax, %r8
	movq	80(%rbp), %rax
	movq	8(%rax), %rax
	movq	144(%rbp), %rdx
	movq	8(%rdx), %rcx
	movl	168(%rbp), %edx
	movslq	%edx, %rdx
	addq	%rdx, %rcx
	movq	%rax, %rdx
	call	memcpy
	movq	88(%rbp), %rax
	movl	4(%rax), %eax
	addl	%eax, 168(%rbp)
.L523:
	movq	88(%rbp), %rdx
	movl	168(%rbp), %eax
	movq	176(%rbp), %r9
	movq	%rdx, %r8
	movl	%eax, %edx
	movq	144(%rbp), %rcx
	call	*%r9
	movl	%eax, 168(%rbp)
	cmpl	$0, 168(%rbp)
	jns	.L524
	movq	88(%rbp), %rax
	cmpq	152(%rbp), %rax
	je	.L525
	movq	88(%rbp), %rax
	movq	%rax, %rcx
	call	bdestroy
.L525:
	movq	80(%rbp), %rax
	cmpq	160(%rbp), %rax
	je	.L526
	movq	80(%rbp), %rax
	movq	%rax, %rcx
	call	bdestroy
.L526:
	movl	$0, %eax
	jmp	.L552
.L522:
	cmpl	$0, 68(%rbp)
	jle	.L527
	movl	$0, 108(%rbp)
	jmp	.L528
.L531:
	cmpl	$0, 108(%rbp)
	je	.L529
	movl	124(%rbp), %eax
	cmpl	168(%rbp), %eax
	jle	.L529
	movl	124(%rbp), %eax
	subl	168(%rbp), %eax
	movslq	%eax, %r8
	movq	144(%rbp), %rax
	movq	8(%rax), %rdx
	movl	168(%rbp), %eax
	cltq
	addq	%rax, %rdx
	movq	144(%rbp), %rax
	movq	8(%rax), %r9
	movl	168(%rbp), %eax
	cltq
	movl	108(%rbp), %ecx
	movslq	%ecx, %rcx
	subq	%rcx, %rax
	addq	%r9, %rax
	movq	%rax, %rcx
	call	memmove
.L529:
	movq	80(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	je	.L530
	movq	80(%rbp), %rax
	movl	4(%rax), %eax
	movslq	%eax, %r8
	movq	80(%rbp), %rax
	movq	8(%rax), %rax
	movq	144(%rbp), %rdx
	movq	8(%rdx), %r9
	movl	124(%rbp), %edx
	movslq	%edx, %rdx
	movl	108(%rbp), %ecx
	movslq	%ecx, %rcx
	subq	%rcx, %rdx
	leaq	(%r9,%rdx), %rcx
	movq	%rax, %rdx
	call	memcpy
.L530:
	movl	68(%rbp), %eax
	addl	%eax, 108(%rbp)
	movq	88(%rbp), %rax
	movl	4(%rax), %edx
	movl	124(%rbp), %eax
	addl	%edx, %eax
	movl	%eax, 168(%rbp)
.L528:
	movq	88(%rbp), %rdx
	movl	168(%rbp), %eax
	movq	176(%rbp), %r9
	movq	%rdx, %r8
	movl	%eax, %edx
	movq	144(%rbp), %rcx
	call	*%r9
	movl	%eax, 124(%rbp)
	cmpl	$0, 124(%rbp)
	jns	.L531
	cmpl	$0, 108(%rbp)
	je	.L532
	movq	144(%rbp), %rax
	movl	4(%rax), %eax
	movl	%eax, 124(%rbp)
	movl	124(%rbp), %eax
	cmpl	168(%rbp), %eax
	jle	.L533
	movl	124(%rbp), %eax
	subl	168(%rbp), %eax
	movslq	%eax, %r8
	movq	144(%rbp), %rax
	movq	8(%rax), %rdx
	movl	168(%rbp), %eax
	cltq
	addq	%rax, %rdx
	movq	144(%rbp), %rax
	movq	8(%rax), %r9
	movl	168(%rbp), %eax
	cltq
	movl	108(%rbp), %ecx
	movslq	%ecx, %rcx
	subq	%rcx, %rax
	addq	%r9, %rax
	movq	%rax, %rcx
	call	memmove
.L533:
	movq	144(%rbp), %rax
	movl	4(%rax), %eax
	subl	108(%rbp), %eax
	movl	%eax, %edx
	movq	144(%rbp), %rax
	movl	%edx, 4(%rax)
	movq	144(%rbp), %rax
	movq	8(%rax), %rdx
	movq	144(%rbp), %rax
	movl	4(%rax), %eax
	cltq
	addq	%rdx, %rax
	movb	$0, (%rax)
.L532:
	movq	88(%rbp), %rax
	cmpq	152(%rbp), %rax
	je	.L534
	movq	88(%rbp), %rax
	movq	%rax, %rcx
	call	bdestroy
.L534:
	movq	80(%rbp), %rax
	cmpq	160(%rbp), %rax
	je	.L535
	movq	80(%rbp), %rax
	movq	%rax, %rcx
	call	bdestroy
.L535:
	movl	$0, %eax
	jmp	.L552
.L527:
	movl	$32, 112(%rbp)
	leaq	-96(%rbp), %rax
	movq	%rax, 96(%rbp)
	movl	$0, 116(%rbp)
	movl	116(%rbp), %eax
	movl	%eax, 108(%rbp)
	jmp	.L536
.L544:
	movl	112(%rbp), %eax
	subl	$1, %eax
	cmpl	%eax, 116(%rbp)
	jl	.L537
	movl	112(%rbp), %eax
	cmpl	$134217727, %eax
	jbe	.L538
	movl	$-1, 120(%rbp)
	jmp	.L539
.L538:
	sall	112(%rbp)
	movl	112(%rbp), %eax
	cltq
	sall	$3, %eax
	movl	%eax, 56(%rbp)
	leaq	-96(%rbp), %rax
	cmpq	%rax, 96(%rbp)
	jne	.L540
	movq	$0, 96(%rbp)
.L540:
	movl	56(%rbp), %eax
	movslq	%eax, %rdx
	movq	96(%rbp), %rax
	movq	%rax, %rcx
	call	realloc
	movq	%rax, 48(%rbp)
	cmpq	$0, 48(%rbp)
	jne	.L541
	movl	$-1, 120(%rbp)
	jmp	.L539
.L541:
	cmpq	$0, 96(%rbp)
	jne	.L542
	leaq	-96(%rbp), %rdx
	movq	48(%rbp), %rax
	movl	$132, %r8d
	movq	%rax, %rcx
	call	memcpy
.L542:
	movq	48(%rbp), %rax
	movq	%rax, 96(%rbp)
.L537:
	movl	116(%rbp), %eax
	cltq
	leaq	0(,%rax,4), %rdx
	movq	96(%rbp), %rax
	addq	%rax, %rdx
	movl	168(%rbp), %eax
	movl	%eax, (%rdx)
	addl	$1, 116(%rbp)
	movl	68(%rbp), %eax
	subl	%eax, 108(%rbp)
	movq	88(%rbp), %rax
	movl	4(%rax), %eax
	addl	%eax, 168(%rbp)
	cmpl	$0, 168(%rbp)
	js	.L543
	cmpl	$0, 108(%rbp)
	jns	.L536
.L543:
	movl	$-1, 120(%rbp)
	jmp	.L539
.L536:
	movq	88(%rbp), %rdx
	movl	168(%rbp), %eax
	movq	176(%rbp), %r9
	movq	%rdx, %r8
	movl	%eax, %edx
	movq	144(%rbp), %rcx
	call	*%r9
	movl	%eax, 168(%rbp)
	cmpl	$0, 168(%rbp)
	jns	.L544
	movl	116(%rbp), %eax
	cltq
	leaq	0(,%rax,4), %rdx
	movq	96(%rbp), %rax
	addq	%rax, %rdx
	movq	144(%rbp), %rax
	movl	4(%rax), %eax
	movl	%eax, (%rdx)
	movq	144(%rbp), %rax
	movl	4(%rax), %edx
	movl	108(%rbp), %eax
	addl	%edx, %eax
	addl	$1, %eax
	movl	%eax, %edx
	movq	144(%rbp), %rcx
	call	balloc
	movl	%eax, 120(%rbp)
	cmpl	$0, 120(%rbp)
	jne	.L553
	movq	144(%rbp), %rax
	movl	4(%rax), %edx
	movl	108(%rbp), %eax
	addl	%eax, %edx
	movq	144(%rbp), %rax
	movl	%edx, 4(%rax)
	movl	116(%rbp), %eax
	subl	$1, %eax
	movl	%eax, 124(%rbp)
	jmp	.L545
.L548:
	movl	124(%rbp), %eax
	cltq
	leaq	0(,%rax,4), %rdx
	movq	96(%rbp), %rax
	addq	%rdx, %rax
	movl	(%rax), %edx
	movq	88(%rbp), %rax
	movl	4(%rax), %eax
	addl	%edx, %eax
	movl	%eax, 64(%rbp)
	movl	124(%rbp), %eax
	cltq
	addq	$1, %rax
	leaq	0(,%rax,4), %rdx
	movq	96(%rbp), %rax
	addq	%rdx, %rax
	movl	(%rax), %eax
	subl	64(%rbp), %eax
	movl	%eax, 60(%rbp)
	cmpl	$0, 60(%rbp)
	je	.L546
	movl	60(%rbp), %eax
	movslq	%eax, %rcx
	movq	144(%rbp), %rax
	movq	8(%rax), %rdx
	movl	64(%rbp), %eax
	cltq
	addq	%rax, %rdx
	movq	144(%rbp), %rax
	movq	8(%rax), %r8
	movl	64(%rbp), %eax
	movslq	%eax, %r9
	movl	108(%rbp), %eax
	cltq
	addq	%r9, %rax
	addq	%r8, %rax
	movq	%rcx, %r8
	movq	%rax, %rcx
	call	memmove
.L546:
	movq	80(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	je	.L547
	movq	80(%rbp), %rax
	movl	4(%rax), %eax
	movslq	%eax, %r8
	movq	80(%rbp), %rax
	movq	8(%rax), %rax
	movq	144(%rbp), %rdx
	movq	8(%rdx), %r9
	movl	64(%rbp), %edx
	movslq	%edx, %rcx
	movl	108(%rbp), %edx
	movslq	%edx, %rdx
	addq	%rdx, %rcx
	movq	80(%rbp), %rdx
	movl	4(%rdx), %edx
	movslq	%edx, %rdx
	subq	%rdx, %rcx
	addq	%r9, %rcx
	movq	%rax, %rdx
	call	memmove
.L547:
	movl	68(%rbp), %eax
	addl	%eax, 108(%rbp)
	subl	$1, 124(%rbp)
.L545:
	cmpl	$0, 124(%rbp)
	jns	.L548
	movq	144(%rbp), %rax
	movq	8(%rax), %rdx
	movq	144(%rbp), %rax
	movl	4(%rax), %eax
	cltq
	addq	%rdx, %rax
	movb	$0, (%rax)
	jmp	.L539
.L553:
	nop
.L539:
	leaq	-96(%rbp), %rax
	cmpq	%rax, 96(%rbp)
	je	.L549
	movq	96(%rbp), %rax
	movq	%rax, %rcx
	call	free
.L549:
	movq	88(%rbp), %rax
	cmpq	152(%rbp), %rax
	je	.L550
	movq	88(%rbp), %rax
	movq	%rax, %rcx
	call	bdestroy
.L550:
	movq	80(%rbp), %rax
	cmpq	160(%rbp), %rax
	je	.L551
	movq	80(%rbp), %rax
	movq	%rax, %rcx
	call	bdestroy
.L551:
	movl	120(%rbp), %eax
.L552:
	addq	$256, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	bfindreplace
	.def	bfindreplace;	.scl	2;	.type	32;	.endef
	.seh_proc	bfindreplace
bfindreplace:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$48, %rsp
	.seh_stackalloc	48
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movq	%rdx, 24(%rbp)
	movq	%r8, 32(%rbp)
	movl	%r9d, 40(%rbp)
	movl	40(%rbp), %r8d
	movq	32(%rbp), %rcx
	movq	24(%rbp), %rax
	leaq	binstr(%rip), %rdx
	movq	%rdx, 32(%rsp)
	movl	%r8d, %r9d
	movq	%rcx, %r8
	movq	%rax, %rdx
	movq	16(%rbp), %rcx
	call	findreplaceengine
	addq	$48, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	bfindreplacecaseless
	.def	bfindreplacecaseless;	.scl	2;	.type	32;	.endef
	.seh_proc	bfindreplacecaseless
bfindreplacecaseless:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$48, %rsp
	.seh_stackalloc	48
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movq	%rdx, 24(%rbp)
	movq	%r8, 32(%rbp)
	movl	%r9d, 40(%rbp)
	movl	40(%rbp), %r8d
	movq	32(%rbp), %rcx
	movq	24(%rbp), %rax
	leaq	binstrcaseless(%rip), %rdx
	movq	%rdx, 32(%rsp)
	movl	%r8d, %r9d
	movq	%rcx, %r8
	movq	%rax, %rdx
	movq	16(%rbp), %rcx
	call	findreplaceengine
	addq	$48, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	binsertch
	.def	binsertch;	.scl	2;	.type	32;	.endef
	.seh_proc	binsertch
binsertch:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$48, %rsp
	.seh_stackalloc	48
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movl	%edx, 24(%rbp)
	movl	%r8d, 32(%rbp)
	movl	%r9d, %eax
	movb	%al, 40(%rbp)
	cmpl	$0, 24(%rbp)
	js	.L559
	cmpq	$0, 16(%rbp)
	je	.L559
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	js	.L559
	movq	16(%rbp), %rax
	movl	(%rax), %edx
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, %edx
	jl	.L559
	movq	16(%rbp), %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	jle	.L559
	cmpl	$0, 32(%rbp)
	jns	.L560
.L559:
	movl	$-1, %eax
	jmp	.L561
.L560:
	movq	16(%rbp), %rax
	movl	4(%rax), %edx
	movl	32(%rbp), %eax
	addl	%edx, %eax
	movl	%eax, -8(%rbp)
	movl	24(%rbp), %edx
	movl	32(%rbp), %eax
	addl	%edx, %eax
	movl	%eax, -12(%rbp)
	movl	-8(%rbp), %eax
	orl	-12(%rbp), %eax
	testl	%eax, %eax
	jns	.L562
	movl	$-1, %eax
	jmp	.L561
.L562:
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jle	.L563
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, %edx
	movq	16(%rbp), %rcx
	call	balloc
	testl	%eax, %eax
	je	.L564
	movl	$-1, %eax
	jmp	.L561
.L564:
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	movl	%eax, 24(%rbp)
	movq	16(%rbp), %rax
	movl	-12(%rbp), %edx
	movl	%edx, 4(%rax)
	jmp	.L565
.L563:
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, %edx
	movq	16(%rbp), %rcx
	call	balloc
	testl	%eax, %eax
	je	.L566
	movl	$-1, %eax
	jmp	.L561
.L566:
	movl	-8(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.L567
.L568:
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-4(%rbp), %eax
	subl	32(%rbp), %eax
	cltq
	leaq	(%rdx,%rax), %rcx
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-4(%rbp), %eax
	cltq
	addq	%rax, %rdx
	movzbl	(%rcx), %eax
	movb	%al, (%rdx)
	subl	$1, -4(%rbp)
.L567:
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.L568
	movq	16(%rbp), %rax
	movl	-8(%rbp), %edx
	movl	%edx, 4(%rax)
.L565:
	movl	24(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	.L569
.L570:
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-4(%rbp), %eax
	cltq
	addq	%rax, %rdx
	movzbl	40(%rbp), %eax
	movb	%al, (%rdx)
	addl	$1, -4(%rbp)
.L569:
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jl	.L570
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cltq
	addq	%rdx, %rax
	movb	$0, (%rax)
	movl	$0, %eax
.L561:
	addq	$48, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	bpattern
	.def	bpattern;	.scl	2;	.type	32;	.endef
	.seh_proc	bpattern
bpattern:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$48, %rsp
	.seh_stackalloc	48
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movl	%edx, 24(%rbp)
	cmpq	$0, 16(%rbp)
	je	.L572
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	js	.L572
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	jmp	.L573
.L572:
	movl	$0, %eax
.L573:
	movl	%eax, -8(%rbp)
	cmpl	$0, -8(%rbp)
	jle	.L574
	cmpl	$0, 24(%rbp)
	js	.L574
	movl	24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, %edx
	movq	16(%rbp), %rcx
	call	balloc
	testl	%eax, %eax
	je	.L575
.L574:
	movl	$-1, %eax
	jmp	.L576
.L575:
	cmpl	$0, 24(%rbp)
	jle	.L577
	cmpl	$1, -8(%rbp)
	jne	.L578
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	movzbl	(%rax), %eax
	movzbl	%al, %edx
	movl	24(%rbp), %eax
	movl	%edx, %r9d
	movl	$0, %r8d
	movl	%eax, %edx
	movq	16(%rbp), %rcx
	call	bsetstr
	jmp	.L576
.L578:
	movl	-8(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	.L579
.L580:
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-4(%rbp), %eax
	subl	-8(%rbp), %eax
	cltq
	leaq	(%rdx,%rax), %rcx
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-4(%rbp), %eax
	cltq
	addq	%rax, %rdx
	movzbl	(%rcx), %eax
	movb	%al, (%rdx)
	addl	$1, -4(%rbp)
.L579:
	movl	-4(%rbp), %eax
	cmpl	24(%rbp), %eax
	jl	.L580
.L577:
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movl	24(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movb	$0, (%rax)
	movq	16(%rbp), %rax
	movl	24(%rbp), %edx
	movl	%edx, 4(%rax)
	movl	$0, %eax
.L576:
	addq	$48, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	breada
	.def	breada;	.scl	2;	.type	32;	.endef
	.seh_proc	breada
breada:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$48, %rsp
	.seh_stackalloc	48
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movq	%rdx, 24(%rbp)
	movq	%r8, 32(%rbp)
	cmpq	$0, 16(%rbp)
	je	.L582
	movq	16(%rbp), %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	jle	.L582
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	js	.L582
	movq	16(%rbp), %rax
	movl	(%rax), %edx
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, %edx
	jl	.L582
	cmpq	$0, 24(%rbp)
	jne	.L583
.L582:
	movl	$-1, %eax
	jmp	.L584
.L583:
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	addl	$16, %eax
	movl	%eax, -8(%rbp)
.L588:
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, %edx
	movq	16(%rbp), %rcx
	call	balloc
	testl	%eax, %eax
	je	.L585
	movl	$-1, %eax
	jmp	.L584
.L585:
	movl	-8(%rbp), %eax
	subl	-4(%rbp), %eax
	movslq	%eax, %rdx
	movq	16(%rbp), %rax
	movq	8(%rax), %rcx
	movl	-4(%rbp), %eax
	cltq
	addq	%rax, %rcx
	movq	32(%rbp), %r8
	movq	24(%rbp), %rax
	movq	%r8, %r9
	movq	%rdx, %r8
	movl	$1, %edx
	call	*%rax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	%eax, -4(%rbp)
	movq	16(%rbp), %rax
	movl	-4(%rbp), %edx
	movl	%edx, 4(%rax)
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jl	.L590
	movl	$1024, %eax
	cmpl	$1024, -8(%rbp)
	cmovle	-8(%rbp), %eax
	addl	%eax, -8(%rbp)
	jmp	.L588
.L590:
	nop
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-4(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movb	$0, (%rax)
	movl	$0, %eax
.L584:
	addq	$48, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	bread
	.def	bread;	.scl	2;	.type	32;	.endef
	.seh_proc	bread
bread:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$48, %rsp
	.seh_stackalloc	48
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movq	%rdx, 24(%rbp)
	leaq	.LC0(%rip), %rcx
	call	bfromcstr
	movq	%rax, -8(%rbp)
	movq	24(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, %r8
	movq	16(%rbp), %rdx
	movq	%rax, %rcx
	call	breada
	testl	%eax, %eax
	jns	.L592
	movq	-8(%rbp), %rax
	movq	%rax, %rcx
	call	bdestroy
	movl	$0, %eax
	jmp	.L593
.L592:
	movq	-8(%rbp), %rax
.L593:
	addq	$48, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	bassigngets
	.def	bassigngets;	.scl	2;	.type	32;	.endef
	.seh_proc	bassigngets
bassigngets:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$48, %rsp
	.seh_stackalloc	48
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movq	%rdx, 24(%rbp)
	movq	%r8, 32(%rbp)
	movl	%r9d, %eax
	movb	%al, 40(%rbp)
	cmpq	$0, 16(%rbp)
	je	.L595
	movq	16(%rbp), %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	jle	.L595
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	js	.L595
	movq	16(%rbp), %rax
	movl	(%rax), %edx
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, %edx
	jl	.L595
	cmpq	$0, 24(%rbp)
	jne	.L596
.L595:
	movl	$-1, %eax
	jmp	.L597
.L596:
	movl	$0, -4(%rbp)
	movq	16(%rbp), %rax
	movl	(%rax), %eax
	subl	$2, %eax
	movl	%eax, -8(%rbp)
	jmp	.L598
.L602:
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jle	.L599
	movq	16(%rbp), %rax
	movl	-4(%rbp), %edx
	movl	%edx, 4(%rax)
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, %edx
	movq	16(%rbp), %rcx
	call	balloc
	testl	%eax, %eax
	je	.L600
	movl	$-1, %eax
	jmp	.L597
.L600:
	movq	16(%rbp), %rax
	movl	(%rax), %eax
	subl	$2, %eax
	movl	%eax, -8(%rbp)
.L599:
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-4(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movl	-12(%rbp), %edx
	movb	%dl, (%rax)
	addl	$1, -4(%rbp)
	movsbl	40(%rbp), %eax
	cmpl	%eax, -12(%rbp)
	je	.L605
.L598:
	movq	32(%rbp), %rax
	movq	24(%rbp), %rdx
	movq	%rax, %rcx
	call	*%rdx
	movl	%eax, -12(%rbp)
	cmpl	$0, -12(%rbp)
	jns	.L602
	jmp	.L601
.L605:
	nop
.L601:
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-4(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movb	$0, (%rax)
	movq	16(%rbp), %rax
	movl	-4(%rbp), %edx
	movl	%edx, 4(%rax)
	cmpl	$0, -4(%rbp)
	jne	.L603
	cmpl	$0, -12(%rbp)
	jns	.L603
	movl	$1, %eax
	jmp	.L597
.L603:
	movl	$0, %eax
.L597:
	addq	$48, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	bgetsa
	.def	bgetsa;	.scl	2;	.type	32;	.endef
	.seh_proc	bgetsa
bgetsa:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$48, %rsp
	.seh_stackalloc	48
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movq	%rdx, 24(%rbp)
	movq	%r8, 32(%rbp)
	movl	%r9d, %eax
	movb	%al, 40(%rbp)
	cmpq	$0, 16(%rbp)
	je	.L607
	movq	16(%rbp), %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	jle	.L607
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	js	.L607
	movq	16(%rbp), %rax
	movl	(%rax), %edx
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, %edx
	jl	.L607
	cmpq	$0, 24(%rbp)
	jne	.L608
.L607:
	movl	$-1, %eax
	jmp	.L609
.L608:
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	16(%rbp), %rax
	movl	(%rax), %eax
	subl	$2, %eax
	movl	%eax, -8(%rbp)
	jmp	.L610
.L614:
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jle	.L611
	movq	16(%rbp), %rax
	movl	-4(%rbp), %edx
	movl	%edx, 4(%rax)
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, %edx
	movq	16(%rbp), %rcx
	call	balloc
	testl	%eax, %eax
	je	.L612
	movl	$-1, %eax
	jmp	.L609
.L612:
	movq	16(%rbp), %rax
	movl	(%rax), %eax
	subl	$2, %eax
	movl	%eax, -8(%rbp)
.L611:
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-4(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movl	-12(%rbp), %edx
	movb	%dl, (%rax)
	addl	$1, -4(%rbp)
	movsbl	40(%rbp), %eax
	cmpl	%eax, -12(%rbp)
	je	.L617
.L610:
	movq	32(%rbp), %rax
	movq	24(%rbp), %rdx
	movq	%rax, %rcx
	call	*%rdx
	movl	%eax, -12(%rbp)
	cmpl	$0, -12(%rbp)
	jns	.L614
	jmp	.L613
.L617:
	nop
.L613:
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-4(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movb	$0, (%rax)
	movq	16(%rbp), %rax
	movl	-4(%rbp), %edx
	movl	%edx, 4(%rax)
	cmpl	$0, -4(%rbp)
	jne	.L615
	cmpl	$0, -12(%rbp)
	jns	.L615
	movl	$1, %eax
	jmp	.L609
.L615:
	movl	$0, %eax
.L609:
	addq	$48, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	bgets
	.def	bgets;	.scl	2;	.type	32;	.endef
	.seh_proc	bgets
bgets:
	pushq	%rbp
	.seh_pushreg	%rbp
	pushq	%rbx
	.seh_pushreg	%rbx
	subq	$56, %rsp
	.seh_stackalloc	56
	leaq	128(%rsp), %rbp
	.seh_setframe	%rbp, 128
	.seh_endprologue
	movq	%rcx, -48(%rbp)
	movq	%rdx, -40(%rbp)
	movl	%r8d, %eax
	movb	%al, -32(%rbp)
	movsbl	-32(%rbp), %ebx
	leaq	.LC0(%rip), %rcx
	call	bfromcstr
	movq	%rax, -88(%rbp)
	movq	-40(%rbp), %rdx
	movq	-88(%rbp), %rax
	movl	%ebx, %r9d
	movq	%rdx, %r8
	movq	-48(%rbp), %rdx
	movq	%rax, %rcx
	call	bgetsa
	testl	%eax, %eax
	js	.L619
	movq	-88(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	jg	.L620
.L619:
	movq	-88(%rbp), %rax
	movq	%rax, %rcx
	call	bdestroy
	movq	$0, -88(%rbp)
.L620:
	movq	-88(%rbp), %rax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	ret
	.seh_endproc
	.globl	bsopen
	.def	bsopen;	.scl	2;	.type	32;	.endef
	.seh_proc	bsopen
bsopen:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$48, %rsp
	.seh_stackalloc	48
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movq	%rdx, 24(%rbp)
	cmpq	$0, 16(%rbp)
	jne	.L623
	movl	$0, %eax
	jmp	.L624
.L623:
	movl	$32, %ecx
	call	malloc
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.L625
	movl	$0, %eax
	jmp	.L624
.L625:
	movq	-8(%rbp), %rax
	movq	24(%rbp), %rdx
	movq	%rdx, 8(%rax)
	leaq	.LC0(%rip), %rcx
	call	bfromcstr
	movq	-8(%rbp), %rdx
	movq	%rax, (%rdx)
	movq	-8(%rbp), %rax
	movq	16(%rbp), %rdx
	movq	%rdx, 16(%rax)
	movq	-8(%rbp), %rax
	movl	$1024, 28(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-8(%rbp), %rax
.L624:
	addq	$48, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	bsbufflength
	.def	bsbufflength;	.scl	2;	.type	32;	.endef
	.seh_proc	bsbufflength
bsbufflength:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$16, %rsp
	.seh_stackalloc	16
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movl	%edx, 24(%rbp)
	cmpq	$0, 16(%rbp)
	je	.L627
	cmpl	$0, 24(%rbp)
	jns	.L628
.L627:
	movl	$-1, %eax
	jmp	.L629
.L628:
	movq	16(%rbp), %rax
	movl	28(%rax), %eax
	movl	%eax, -4(%rbp)
	cmpl	$0, 24(%rbp)
	jle	.L630
	movq	16(%rbp), %rax
	movl	24(%rbp), %edx
	movl	%edx, 28(%rax)
.L630:
	movl	-4(%rbp), %eax
.L629:
	addq	$16, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	bseof
	.def	bseof;	.scl	2;	.type	32;	.endef
	.seh_proc	bseof
bseof:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	cmpq	$0, 16(%rbp)
	je	.L632
	movq	16(%rbp), %rax
	movq	16(%rax), %rax
	testq	%rax, %rax
	jne	.L633
.L632:
	movl	$-1, %eax
	jmp	.L634
.L633:
	movq	16(%rbp), %rax
	movl	24(%rax), %eax
	testl	%eax, %eax
	je	.L635
	movq	16(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	jne	.L635
	movl	$1, %eax
	jmp	.L634
.L635:
	movl	$0, %eax
.L634:
	popq	%rbp
	ret
	.seh_endproc
	.globl	bsclose
	.def	bsclose;	.scl	2;	.type	32;	.endef
	.seh_proc	bsclose
bsclose:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$48, %rsp
	.seh_stackalloc	48
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	cmpq	$0, 16(%rbp)
	jne	.L638
	movl	$0, %eax
	jmp	.L639
.L638:
	movq	16(%rbp), %rax
	movq	$0, 16(%rax)
	movq	16(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	je	.L640
	movq	16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rcx
	call	bdestroy
.L640:
	movq	16(%rbp), %rax
	movq	$0, (%rax)
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -8(%rbp)
	movq	16(%rbp), %rax
	movq	$0, 8(%rax)
	movq	16(%rbp), %rax
	movl	$1, 24(%rax)
	movq	16(%rbp), %rcx
	call	free
	movq	-8(%rbp), %rax
.L639:
	addq	$48, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	bsreadlna
	.def	bsreadlna;	.scl	2;	.type	32;	.endef
	.seh_proc	bsreadlna
bsreadlna:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$80, %rsp
	.seh_stackalloc	80
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movq	%rdx, 24(%rbp)
	movl	%r8d, %eax
	movb	%al, 32(%rbp)
	cmpq	$0, 24(%rbp)
	je	.L642
	movq	24(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	je	.L642
	cmpq	$0, 16(%rbp)
	je	.L642
	movq	16(%rbp), %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	jle	.L642
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	js	.L642
	movq	16(%rbp), %rax
	movl	(%rax), %edx
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, %edx
	jge	.L643
.L642:
	movl	$-1, %eax
	jmp	.L657
.L643:
	movq	24(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	24(%rbp), %rax
	movl	28(%rax), %eax
	leal	1(%rax), %edx
	movq	24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rcx
	call	balloc
	testl	%eax, %eax
	je	.L645
	movl	$-1, %eax
	jmp	.L657
.L645:
	movq	24(%rbp), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	%rax, -40(%rbp)
	movl	-8(%rbp), %eax
	movslq	%eax, %rdx
	movq	-16(%rbp), %rax
	addq	%rax, %rdx
	movzbl	32(%rbp), %eax
	movb	%al, (%rdx)
	movl	$0, -4(%rbp)
	jmp	.L646
.L647:
	addl	$1, -4(%rbp)
.L646:
	movl	-4(%rbp), %eax
	movslq	%eax, %rdx
	movq	-16(%rbp), %rax
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	cmpb	%al, 32(%rbp)
	jne	.L647
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.L648
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	leaq	-48(%rbp), %rax
	movq	%rax, %rdx
	movq	16(%rbp), %rcx
	call	bconcat
	movl	%eax, -24(%rbp)
	movq	24(%rbp), %rax
	movq	(%rax), %rax
	movl	-8(%rbp), %edx
	movl	%edx, 4(%rax)
	cmpl	$0, -24(%rbp)
	jne	.L649
	movl	-4(%rbp), %eax
	leal	1(%rax), %edx
	movq	24(%rbp), %rax
	movq	(%rax), %rax
	movl	%edx, %r8d
	movl	$0, %edx
	movq	%rax, %rcx
	call	bdelete
.L649:
	movl	$0, %eax
	jmp	.L657
.L648:
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	movl	%eax, -20(%rbp)
	movl	-8(%rbp), %eax
	movl	%eax, -44(%rbp)
	leaq	-48(%rbp), %rax
	movq	%rax, %rdx
	movq	16(%rbp), %rcx
	call	bconcat
	testl	%eax, %eax
	je	.L650
	movl	$-1, %eax
	jmp	.L657
.L650:
	movq	16(%rbp), %rax
	movl	4(%rax), %edx
	movq	24(%rbp), %rax
	movl	28(%rax), %eax
	addl	%edx, %eax
	addl	$1, %eax
	movl	%eax, %edx
	movq	16(%rbp), %rcx
	call	balloc
	testl	%eax, %eax
	je	.L651
	movl	$-1, %eax
	jmp	.L657
.L651:
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cltq
	addq	%rdx, %rax
	movq	%rax, -16(%rbp)
	movq	24(%rbp), %rax
	movq	16(%rax), %r10
	movq	24(%rbp), %rax
	movq	8(%rax), %rcx
	movq	24(%rbp), %rax
	movl	28(%rax), %eax
	movslq	%eax, %rdx
	movq	-16(%rbp), %rax
	movq	%rcx, %r9
	movq	%rdx, %r8
	movl	$1, %edx
	movq	%rax, %rcx
	call	*%r10
	movl	%eax, -8(%rbp)
	cmpl	$0, -8(%rbp)
	jg	.L652
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cltq
	addq	%rdx, %rax
	movb	$0, (%rax)
	movq	24(%rbp), %rax
	movq	(%rax), %rax
	movl	$0, 4(%rax)
	movq	24(%rbp), %rax
	movl	$1, 24(%rax)
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, -20(%rbp)
	sete	%al
	movzbl	%al, %eax
	negl	%eax
	jmp	.L657
.L652:
	movl	-8(%rbp), %eax
	movslq	%eax, %rdx
	movq	-16(%rbp), %rax
	addq	%rax, %rdx
	movzbl	32(%rbp), %eax
	movb	%al, (%rdx)
	movl	$0, -4(%rbp)
	jmp	.L653
.L654:
	addl	$1, -4(%rbp)
.L653:
	movl	-4(%rbp), %eax
	movslq	%eax, %rdx
	movq	-16(%rbp), %rax
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	cmpb	%al, 32(%rbp)
	jne	.L654
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jl	.L659
	movq	16(%rbp), %rax
	movl	4(%rax), %edx
	movl	-8(%rbp), %eax
	addl	%eax, %edx
	movq	16(%rbp), %rax
	movl	%edx, 4(%rax)
	jmp	.L650
.L659:
	nop
	addl	$1, -4(%rbp)
	movq	16(%rbp), %rax
	movl	4(%rax), %edx
	movl	-4(%rbp), %eax
	addl	%eax, %edx
	movq	16(%rbp), %rax
	movl	%edx, 4(%rax)
	movq	24(%rbp), %rax
	movq	(%rax), %rax
	movl	-8(%rbp), %edx
	subl	-4(%rbp), %edx
	movl	%edx, 4(%rax)
	movl	-8(%rbp), %eax
	subl	-4(%rbp), %eax
	movslq	%eax, %rcx
	movl	-4(%rbp), %eax
	movslq	%eax, %rdx
	movq	-16(%rbp), %rax
	addq	%rax, %rdx
	movq	24(%rbp), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rcx, %r8
	movq	%rax, %rcx
	call	memcpy
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cltq
	addq	%rdx, %rax
	movb	$0, (%rax)
	movl	$0, %eax
.L657:
	addq	$80, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	bsreadlnsa
	.def	bsreadlnsa;	.scl	2;	.type	32;	.endef
	.seh_proc	bsreadlnsa
bsreadlnsa:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$112, %rsp
	.seh_stackalloc	112
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movq	%rdx, 24(%rbp)
	movq	%r8, 32(%rbp)
	cmpq	$0, 24(%rbp)
	je	.L661
	movq	24(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	je	.L661
	cmpq	$0, 16(%rbp)
	je	.L661
	cmpq	$0, 32(%rbp)
	je	.L661
	movq	32(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L661
	movq	16(%rbp), %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	jle	.L661
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	js	.L661
	movq	16(%rbp), %rax
	movl	(%rax), %edx
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, %edx
	jge	.L662
.L661:
	movl	$-1, %eax
	jmp	.L679
.L662:
	movq	32(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	$1, %eax
	jne	.L664
	movq	32(%rbp), %rax
	movq	8(%rax), %rax
	movzbl	(%rax), %eax
	movsbl	%al, %edx
	movq	24(%rbp), %rax
	movl	%edx, %r8d
	movq	%rax, %rdx
	movq	16(%rbp), %rcx
	call	bsreadlna
	jmp	.L679
.L664:
	movq	32(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	jle	.L665
	movq	32(%rbp), %rdx
	leaq	-80(%rbp), %rax
	movq	%rax, %rcx
	call	buildCharField
	testl	%eax, %eax
	je	.L666
.L665:
	movl	$-1, %eax
	jmp	.L679
.L666:
	movq	24(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	24(%rbp), %rax
	movl	28(%rax), %eax
	leal	1(%rax), %edx
	movq	24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rcx
	call	balloc
	testl	%eax, %eax
	je	.L667
	movl	$-1, %eax
	jmp	.L679
.L667:
	movq	24(%rbp), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	%rax, -40(%rbp)
	movq	32(%rbp), %rax
	movq	8(%rax), %rax
	movl	-8(%rbp), %edx
	movslq	%edx, %rcx
	movq	-16(%rbp), %rdx
	addq	%rcx, %rdx
	movzbl	(%rax), %eax
	movb	%al, (%rdx)
	movl	$0, -4(%rbp)
	jmp	.L668
.L669:
	addl	$1, -4(%rbp)
.L668:
	movl	-4(%rbp), %eax
	movslq	%eax, %rdx
	movq	-16(%rbp), %rax
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	shrb	$3, %al
	movzbl	%al, %eax
	cltq
	movzbl	-80(%rbp,%rax), %eax
	movzbl	%al, %edx
	movl	-4(%rbp), %eax
	movslq	%eax, %rcx
	movq	-16(%rbp), %rax
	addq	%rcx, %rax
	movzbl	(%rax), %eax
	movzbl	%al, %eax
	andl	$7, %eax
	movl	%eax, %ecx
	sarq	%cl, %rdx
	movq	%rdx, %rax
	andl	$1, %eax
	testq	%rax, %rax
	je	.L669
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.L670
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	leaq	-48(%rbp), %rax
	movq	%rax, %rdx
	movq	16(%rbp), %rcx
	call	bconcat
	movl	%eax, -24(%rbp)
	movq	24(%rbp), %rax
	movq	(%rax), %rax
	movl	-8(%rbp), %edx
	movl	%edx, 4(%rax)
	cmpl	$0, -24(%rbp)
	jne	.L671
	movl	-4(%rbp), %eax
	leal	1(%rax), %edx
	movq	24(%rbp), %rax
	movq	(%rax), %rax
	movl	%edx, %r8d
	movl	$0, %edx
	movq	%rax, %rcx
	call	bdelete
.L671:
	movl	$0, %eax
	jmp	.L679
.L670:
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	movl	%eax, -20(%rbp)
	movl	-8(%rbp), %eax
	movl	%eax, -44(%rbp)
	leaq	-48(%rbp), %rax
	movq	%rax, %rdx
	movq	16(%rbp), %rcx
	call	bconcat
	testl	%eax, %eax
	je	.L672
	movl	$-1, %eax
	jmp	.L679
.L672:
	movq	16(%rbp), %rax
	movl	4(%rax), %edx
	movq	24(%rbp), %rax
	movl	28(%rax), %eax
	addl	%edx, %eax
	addl	$1, %eax
	movl	%eax, %edx
	movq	16(%rbp), %rcx
	call	balloc
	testl	%eax, %eax
	je	.L673
	movl	$-1, %eax
	jmp	.L679
.L673:
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cltq
	addq	%rdx, %rax
	movq	%rax, -16(%rbp)
	movq	24(%rbp), %rax
	movq	16(%rax), %r10
	movq	24(%rbp), %rax
	movq	8(%rax), %rcx
	movq	24(%rbp), %rax
	movl	28(%rax), %eax
	movslq	%eax, %rdx
	movq	-16(%rbp), %rax
	movq	%rcx, %r9
	movq	%rdx, %r8
	movl	$1, %edx
	movq	%rax, %rcx
	call	*%r10
	movl	%eax, -8(%rbp)
	cmpl	$0, -8(%rbp)
	jg	.L674
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cltq
	addq	%rdx, %rax
	movb	$0, (%rax)
	movq	24(%rbp), %rax
	movq	(%rax), %rax
	movl	$0, 4(%rax)
	movq	24(%rbp), %rax
	movl	$1, 24(%rax)
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, -20(%rbp)
	sete	%al
	movzbl	%al, %eax
	negl	%eax
	jmp	.L679
.L674:
	movq	32(%rbp), %rax
	movq	8(%rax), %rax
	movl	-8(%rbp), %edx
	movslq	%edx, %rcx
	movq	-16(%rbp), %rdx
	addq	%rcx, %rdx
	movzbl	(%rax), %eax
	movb	%al, (%rdx)
	movl	$0, -4(%rbp)
	jmp	.L675
.L676:
	addl	$1, -4(%rbp)
.L675:
	movl	-4(%rbp), %eax
	movslq	%eax, %rdx
	movq	-16(%rbp), %rax
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	shrb	$3, %al
	movzbl	%al, %eax
	cltq
	movzbl	-80(%rbp,%rax), %eax
	movzbl	%al, %edx
	movl	-4(%rbp), %eax
	movslq	%eax, %rcx
	movq	-16(%rbp), %rax
	addq	%rcx, %rax
	movzbl	(%rax), %eax
	movzbl	%al, %eax
	andl	$7, %eax
	movl	%eax, %ecx
	sarq	%cl, %rdx
	movq	%rdx, %rax
	andl	$1, %eax
	testq	%rax, %rax
	je	.L676
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jl	.L681
	movq	16(%rbp), %rax
	movl	4(%rax), %edx
	movl	-8(%rbp), %eax
	addl	%eax, %edx
	movq	16(%rbp), %rax
	movl	%edx, 4(%rax)
	jmp	.L672
.L681:
	nop
	addl	$1, -4(%rbp)
	movq	16(%rbp), %rax
	movl	4(%rax), %edx
	movl	-4(%rbp), %eax
	addl	%eax, %edx
	movq	16(%rbp), %rax
	movl	%edx, 4(%rax)
	movq	24(%rbp), %rax
	movq	(%rax), %rax
	movl	-8(%rbp), %edx
	subl	-4(%rbp), %edx
	movl	%edx, 4(%rax)
	movl	-8(%rbp), %eax
	subl	-4(%rbp), %eax
	movslq	%eax, %rcx
	movl	-4(%rbp), %eax
	movslq	%eax, %rdx
	movq	-16(%rbp), %rax
	addq	%rax, %rdx
	movq	24(%rbp), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rcx, %r8
	movq	%rax, %rcx
	call	memcpy
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cltq
	addq	%rdx, %rax
	movb	$0, (%rax)
	movl	$0, %eax
.L679:
	addq	$112, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	bsreada
	.def	bsreada;	.scl	2;	.type	32;	.endef
	.seh_proc	bsreada
bsreada:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$80, %rsp
	.seh_stackalloc	80
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movq	%rdx, 24(%rbp)
	movl	%r8d, 32(%rbp)
	cmpq	$0, 24(%rbp)
	je	.L683
	movq	24(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	je	.L683
	cmpq	$0, 16(%rbp)
	je	.L683
	movq	16(%rbp), %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	jle	.L683
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	js	.L683
	movq	16(%rbp), %rax
	movl	(%rax), %edx
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, %edx
	jl	.L683
	cmpl	$0, 32(%rbp)
	jg	.L684
.L683:
	movl	$-1, %eax
	jmp	.L700
.L684:
	movq	16(%rbp), %rax
	movl	4(%rax), %edx
	movl	$2147483647, %eax
	subl	%edx, %eax
	cmpl	%eax, 32(%rbp)
	jle	.L686
	movl	$-1, %eax
	jmp	.L700
.L686:
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	addl	%eax, 32(%rbp)
	movq	24(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	movl	%eax, -8(%rbp)
	cmpl	$0, -4(%rbp)
	jne	.L687
	movq	24(%rbp), %rax
	movl	24(%rax), %eax
	testl	%eax, %eax
	je	.L688
	movl	$-1, %eax
	jmp	.L700
.L688:
	movq	16(%rbp), %rax
	movl	(%rax), %eax
	cmpl	%eax, 32(%rbp)
	jge	.L687
	movq	24(%rbp), %rax
	movq	16(%rax), %rax
	movq	24(%rbp), %rdx
	movq	8(%rdx), %r9
	movq	16(%rbp), %rdx
	movl	4(%rdx), %ecx
	movl	32(%rbp), %edx
	subl	%ecx, %edx
	movslq	%edx, %r8
	movq	16(%rbp), %rdx
	movq	8(%rdx), %rcx
	movq	16(%rbp), %rdx
	movl	4(%rdx), %edx
	movslq	%edx, %rdx
	addq	%rdx, %rcx
	movl	$1, %edx
	call	*%rax
	movl	%eax, -4(%rbp)
	cmpl	$0, -4(%rbp)
	jle	.L689
	movq	16(%rbp), %rax
	movl	4(%rax), %edx
	movl	32(%rbp), %eax
	subl	%edx, %eax
	cmpl	%eax, -4(%rbp)
	jle	.L690
.L689:
	movq	24(%rbp), %rax
	movl	$1, 24(%rax)
	movl	$-1, %eax
	jmp	.L700
.L690:
	movq	16(%rbp), %rax
	movl	4(%rax), %edx
	movl	-4(%rbp), %eax
	addl	%eax, %edx
	movq	16(%rbp), %rax
	movl	%edx, 4(%rax)
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cltq
	addq	%rdx, %rax
	movb	$0, (%rax)
	movl	$0, %eax
	jmp	.L700
.L687:
	movq	24(%rbp), %rax
	movl	28(%rax), %eax
	leal	1(%rax), %edx
	movq	24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rcx
	call	balloc
	testl	%eax, %eax
	je	.L691
	movl	$-1, %eax
	jmp	.L700
.L691:
	movq	24(%rbp), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	%rax, -40(%rbp)
.L697:
	movq	16(%rbp), %rax
	movl	4(%rax), %edx
	movl	-4(%rbp), %eax
	addl	%edx, %eax
	cmpl	%eax, 32(%rbp)
	jg	.L692
	movq	16(%rbp), %rax
	movl	4(%rax), %edx
	movl	32(%rbp), %eax
	subl	%edx, %eax
	movl	%eax, -44(%rbp)
	leaq	-48(%rbp), %rax
	movq	%rax, %rdx
	movq	16(%rbp), %rcx
	call	bconcat
	movl	%eax, -20(%rbp)
	movq	24(%rbp), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %edx
	movl	%edx, 4(%rax)
	cmpl	$0, -20(%rbp)
	jne	.L693
	movl	-44(%rbp), %edx
	movq	24(%rbp), %rax
	movq	(%rax), %rax
	movl	%edx, %r8d
	movl	$0, %edx
	movq	%rax, %rcx
	call	bdelete
.L693:
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, -8(%rbp)
	sete	%al
	movzbl	%al, %eax
	negl	%eax
	jmp	.L700
.L692:
	movl	-4(%rbp), %eax
	movl	%eax, -44(%rbp)
	leaq	-48(%rbp), %rax
	movq	%rax, %rdx
	movq	16(%rbp), %rcx
	call	bconcat
	testl	%eax, %eax
	jne	.L701
	movq	16(%rbp), %rax
	movl	4(%rax), %edx
	movl	32(%rbp), %eax
	subl	%edx, %eax
	movl	%eax, -4(%rbp)
	movq	24(%rbp), %rax
	movl	28(%rax), %eax
	cmpl	%eax, -4(%rbp)
	jle	.L696
	movq	24(%rbp), %rax
	movl	28(%rax), %eax
	movl	%eax, -4(%rbp)
.L696:
	movq	24(%rbp), %rax
	movq	16(%rax), %r10
	movq	24(%rbp), %rax
	movq	8(%rax), %rcx
	movl	-4(%rbp), %eax
	movslq	%eax, %rdx
	movq	-16(%rbp), %rax
	movq	%rcx, %r9
	movq	%rdx, %r8
	movl	$1, %edx
	movq	%rax, %rcx
	call	*%r10
	movl	%eax, -4(%rbp)
	cmpl	$0, -4(%rbp)
	jg	.L697
	jmp	.L695
.L701:
	nop
.L695:
	cmpl	$0, -4(%rbp)
	jns	.L698
	movl	$0, -4(%rbp)
.L698:
	cmpl	$0, -4(%rbp)
	jne	.L699
	movq	24(%rbp), %rax
	movl	$1, 24(%rax)
.L699:
	movq	24(%rbp), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %edx
	movl	%edx, 4(%rax)
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, -8(%rbp)
	sete	%al
	movzbl	%al, %eax
	negl	%eax
.L700:
	addq	$80, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	bsreadln
	.def	bsreadln;	.scl	2;	.type	32;	.endef
	.seh_proc	bsreadln
bsreadln:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$32, %rsp
	.seh_stackalloc	32
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movq	%rdx, 24(%rbp)
	movl	%r8d, %eax
	movb	%al, 32(%rbp)
	cmpq	$0, 24(%rbp)
	je	.L703
	movq	24(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	je	.L703
	cmpq	$0, 16(%rbp)
	je	.L703
	movq	16(%rbp), %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	jg	.L704
.L703:
	movl	$-1, %eax
	jmp	.L705
.L704:
	movq	24(%rbp), %rax
	movl	28(%rax), %eax
	leal	1(%rax), %edx
	movq	24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rcx
	call	balloc
	testl	%eax, %eax
	je	.L706
	movl	$-1, %eax
	jmp	.L705
.L706:
	movq	16(%rbp), %rax
	movl	$0, 4(%rax)
	movsbl	32(%rbp), %edx
	movq	24(%rbp), %rax
	movl	%edx, %r8d
	movq	%rax, %rdx
	movq	16(%rbp), %rcx
	call	bsreadlna
.L705:
	addq	$32, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	bsreadlns
	.def	bsreadlns;	.scl	2;	.type	32;	.endef
	.seh_proc	bsreadlns
bsreadlns:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$32, %rsp
	.seh_stackalloc	32
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movq	%rdx, 24(%rbp)
	movq	%r8, 32(%rbp)
	cmpq	$0, 24(%rbp)
	je	.L708
	movq	24(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	je	.L708
	cmpq	$0, 16(%rbp)
	je	.L708
	cmpq	$0, 32(%rbp)
	je	.L708
	movq	32(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L708
	movq	16(%rbp), %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	jg	.L709
.L708:
	movl	$-1, %eax
	jmp	.L710
.L709:
	movq	32(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	$1, %eax
	jne	.L711
	movq	32(%rbp), %rax
	movq	8(%rax), %rax
	movzbl	(%rax), %eax
	movsbl	%al, %edx
	movq	24(%rbp), %rax
	movl	%edx, %r8d
	movq	%rax, %rdx
	movq	16(%rbp), %rcx
	call	bsreadln
	jmp	.L710
.L711:
	movq	32(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	jg	.L712
	movl	$-1, %eax
	jmp	.L710
.L712:
	movq	24(%rbp), %rax
	movl	28(%rax), %eax
	leal	1(%rax), %edx
	movq	24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rcx
	call	balloc
	testl	%eax, %eax
	je	.L713
	movl	$-1, %eax
	jmp	.L710
.L713:
	movq	16(%rbp), %rax
	movl	$0, 4(%rax)
	movq	32(%rbp), %rdx
	movq	24(%rbp), %rax
	movq	%rdx, %r8
	movq	%rax, %rdx
	movq	16(%rbp), %rcx
	call	bsreadlnsa
.L710:
	addq	$32, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	bsread
	.def	bsread;	.scl	2;	.type	32;	.endef
	.seh_proc	bsread
bsread:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$32, %rsp
	.seh_stackalloc	32
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movq	%rdx, 24(%rbp)
	movl	%r8d, 32(%rbp)
	cmpq	$0, 24(%rbp)
	je	.L715
	movq	24(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	je	.L715
	cmpq	$0, 16(%rbp)
	je	.L715
	movq	16(%rbp), %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	jle	.L715
	cmpl	$0, 32(%rbp)
	jg	.L716
.L715:
	movl	$-1, %eax
	jmp	.L717
.L716:
	movq	24(%rbp), %rax
	movl	28(%rax), %eax
	leal	1(%rax), %edx
	movq	24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rcx
	call	balloc
	testl	%eax, %eax
	je	.L718
	movl	$-1, %eax
	jmp	.L717
.L718:
	movq	16(%rbp), %rax
	movl	$0, 4(%rax)
	movl	32(%rbp), %edx
	movq	24(%rbp), %rax
	movl	%edx, %r8d
	movq	%rax, %rdx
	movq	16(%rbp), %rcx
	call	bsreada
.L717:
	addq	$32, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	bsunread
	.def	bsunread;	.scl	2;	.type	32;	.endef
	.seh_proc	bsunread
bsunread:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$32, %rsp
	.seh_stackalloc	32
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movq	%rdx, 24(%rbp)
	cmpq	$0, 16(%rbp)
	je	.L720
	movq	16(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.L721
.L720:
	movl	$-1, %eax
	jmp	.L722
.L721:
	movq	16(%rbp), %rax
	movq	(%rax), %rax
	movq	24(%rbp), %rdx
	movl	$63, %r9d
	movq	%rdx, %r8
	movl	$0, %edx
	movq	%rax, %rcx
	call	binsert
.L722:
	addq	$32, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	bspeek
	.def	bspeek;	.scl	2;	.type	32;	.endef
	.seh_proc	bspeek
bspeek:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$32, %rsp
	.seh_stackalloc	32
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movq	%rdx, 24(%rbp)
	cmpq	$0, 24(%rbp)
	je	.L724
	movq	24(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.L725
.L724:
	movl	$-1, %eax
	jmp	.L726
.L725:
	movq	24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	movq	16(%rbp), %rcx
	call	bassign
.L726:
	addq	$32, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	bjoinblk
	.def	bjoinblk;	.scl	2;	.type	32;	.endef
	.seh_proc	bjoinblk
bjoinblk:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$64, %rsp
	.seh_stackalloc	64
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movq	%rdx, 24(%rbp)
	movl	%r8d, 32(%rbp)
	cmpq	$0, 16(%rbp)
	je	.L728
	movq	16(%rbp), %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	jns	.L729
.L728:
	movl	$0, %eax
	jmp	.L730
.L729:
	cmpl	$0, 32(%rbp)
	jns	.L731
	movl	$0, %eax
	jmp	.L730
.L731:
	cmpl	$0, 32(%rbp)
	jle	.L732
	cmpq	$0, 24(%rbp)
	jne	.L732
	movl	$0, %eax
	jmp	.L730
.L732:
	movq	16(%rbp), %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	jg	.L733
	movl	$0, %edx
	leaq	.LC0(%rip), %rcx
	call	blk2bstr
	jmp	.L730
.L733:
	movl	$0, -12(%rbp)
	movl	$1, -16(%rbp)
	jmp	.L734
.L737:
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-12(%rbp), %eax
	cltq
	salq	$3, %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -28(%rbp)
	jns	.L735
	movl	$0, %eax
	jmp	.L730
.L735:
	movl	$2147483647, %eax
	subl	-16(%rbp), %eax
	cmpl	%eax, -28(%rbp)
	jle	.L736
	movl	$0, %eax
	jmp	.L730
.L736:
	movl	-28(%rbp), %eax
	addl	%eax, -16(%rbp)
	addl	$1, -12(%rbp)
.L734:
	movq	16(%rbp), %rax
	movl	(%rax), %eax
	cmpl	%eax, -12(%rbp)
	jl	.L737
	movl	$16, %ecx
	call	malloc
	movq	%rax, -24(%rbp)
	cmpl	$0, 32(%rbp)
	jne	.L738
	movl	-16(%rbp), %eax
	cltq
	movq	%rax, %rcx
	call	malloc
	movq	%rax, %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, 8(%rax)
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.L739
	movq	-24(%rbp), %rax
	movq	%rax, %rcx
	call	free
	movl	$0, %eax
	jmp	.L730
.L739:
	movl	$0, -12(%rbp)
	jmp	.L740
.L741:
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-12(%rbp), %eax
	cltq
	salq	$3, %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	movslq	%eax, %rcx
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-12(%rbp), %eax
	cltq
	salq	$3, %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	8(%rax), %rdx
	movq	-8(%rbp), %rax
	movq	%rcx, %r8
	movq	%rax, %rcx
	call	memcpy
	movl	-28(%rbp), %eax
	cltq
	addq	%rax, -8(%rbp)
	addl	$1, -12(%rbp)
.L740:
	movq	16(%rbp), %rax
	movl	(%rax), %eax
	cmpl	%eax, -12(%rbp)
	jl	.L741
	jmp	.L742
.L738:
	movq	16(%rbp), %rax
	movl	(%rax), %eax
	leal	-1(%rax), %edx
	movl	32(%rbp), %eax
	imull	%edx, %eax
	movl	%eax, -28(%rbp)
	movq	16(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$512, %eax
	jg	.L743
	cmpl	$127, 32(%rbp)
	jle	.L744
.L743:
	movl	-28(%rbp), %eax
	cltd
	idivl	32(%rbp)
	movl	%eax, %edx
	movq	16(%rbp), %rax
	movl	(%rax), %eax
	subl	$1, %eax
	cmpl	%eax, %edx
	je	.L744
	movl	$0, %eax
	jmp	.L730
.L744:
	movl	$2147483647, %eax
	subl	-16(%rbp), %eax
	cmpl	%eax, -28(%rbp)
	jle	.L745
	movl	$0, %eax
	jmp	.L730
.L745:
	movl	-28(%rbp), %eax
	addl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	cltq
	movq	%rax, %rcx
	call	malloc
	movq	%rax, %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, 8(%rax)
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.L746
	movq	-24(%rbp), %rax
	movq	%rax, %rcx
	call	free
	movl	$0, %eax
	jmp	.L730
.L746:
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	movslq	%eax, %rcx
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rdx
	movq	-8(%rbp), %rax
	movq	%rcx, %r8
	movq	%rax, %rcx
	call	memcpy
	movl	-28(%rbp), %eax
	cltq
	addq	%rax, -8(%rbp)
	movl	$1, -12(%rbp)
	jmp	.L747
.L749:
	movl	32(%rbp), %eax
	movslq	%eax, %rcx
	movq	24(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	%rcx, %r8
	movq	%rax, %rcx
	call	memcpy
	movl	32(%rbp), %eax
	cltq
	addq	%rax, -8(%rbp)
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-12(%rbp), %eax
	cltq
	salq	$3, %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -28(%rbp)
	je	.L748
	movl	-28(%rbp), %eax
	movslq	%eax, %rcx
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-12(%rbp), %eax
	cltq
	salq	$3, %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	8(%rax), %rdx
	movq	-8(%rbp), %rax
	movq	%rcx, %r8
	movq	%rax, %rcx
	call	memcpy
	movl	-28(%rbp), %eax
	cltq
	addq	%rax, -8(%rbp)
.L748:
	addl	$1, -12(%rbp)
.L747:
	movq	16(%rbp), %rax
	movl	(%rax), %eax
	cmpl	%eax, -12(%rbp)
	jl	.L749
.L742:
	movq	-24(%rbp), %rax
	movl	-16(%rbp), %edx
	movl	%edx, (%rax)
	movl	-16(%rbp), %eax
	leal	-1(%rax), %edx
	movq	-24(%rbp), %rax
	movl	%edx, 4(%rax)
	movq	-24(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-16(%rbp), %eax
	cltq
	subq	$1, %rax
	addq	%rdx, %rax
	movb	$0, (%rax)
	movq	-24(%rbp), %rax
.L730:
	addq	$64, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	bjoin
	.def	bjoin;	.scl	2;	.type	32;	.endef
	.seh_proc	bjoin
bjoin:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$32, %rsp
	.seh_stackalloc	32
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movq	%rdx, 24(%rbp)
	cmpq	$0, 24(%rbp)
	je	.L751
	movq	24(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	js	.L752
	movq	24(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	jne	.L751
.L752:
	movl	$0, %eax
	jmp	.L753
.L751:
	movq	24(%rbp), %rax
	movl	4(%rax), %edx
	movq	24(%rbp), %rax
	movq	8(%rax), %rax
	movl	%edx, %r8d
	movq	%rax, %rdx
	movq	16(%rbp), %rcx
	call	bjoinblk
.L753:
	addq	$32, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	bssplitscb
	.def	bssplitscb;	.scl	2;	.type	32;	.endef
	.seh_proc	bssplitscb
bssplitscb:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$112, %rsp
	.seh_stackalloc	112
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movq	%rdx, 24(%rbp)
	movq	%r8, 32(%rbp)
	movq	%r9, 40(%rbp)
	cmpq	$0, 32(%rbp)
	je	.L755
	cmpq	$0, 16(%rbp)
	je	.L755
	movq	16(%rbp), %rax
	movq	16(%rax), %rax
	testq	%rax, %rax
	je	.L755
	cmpq	$0, 24(%rbp)
	je	.L755
	movq	24(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	jns	.L756
.L755:
	movl	$-1, %eax
	jmp	.L769
.L756:
	leaq	.LC0(%rip), %rcx
	call	bfromcstr
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.L758
	movl	$-1, %eax
	jmp	.L769
.L758:
	movq	24(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	jne	.L759
	nop
.L760:
	movq	-24(%rbp), %rax
	movl	$256, %r8d
	movq	16(%rbp), %rdx
	movq	%rax, %rcx
	call	bsreada
	testl	%eax, %eax
	jns	.L760
	movq	-24(%rbp), %rdx
	movq	40(%rbp), %rax
	movq	32(%rbp), %r9
	movq	%rdx, %r8
	movl	$0, %edx
	movq	%rax, %rcx
	call	*%r9
	movl	%eax, -12(%rbp)
	cmpl	$0, -12(%rbp)
	jle	.L761
	movl	$0, -12(%rbp)
	jmp	.L761
.L759:
	movq	24(%rbp), %rdx
	leaq	-64(%rbp), %rax
	movq	%rax, %rcx
	call	buildCharField
	movl	$0, -4(%rbp)
	movl	-4(%rbp), %eax
	movl	%eax, -8(%rbp)
	movl	-8(%rbp), %eax
	movl	%eax, -12(%rbp)
.L768:
	movq	-24(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, -4(%rbp)
	jl	.L762
	movq	-24(%rbp), %rax
	movl	$256, %r8d
	movq	16(%rbp), %rdx
	movq	%rax, %rcx
	call	bsreada
	movq	-24(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, -4(%rbp)
	jl	.L762
	movq	-24(%rbp), %rcx
	movl	-8(%rbp), %edx
	movq	40(%rbp), %rax
	movq	32(%rbp), %r9
	movq	%rcx, %r8
	movq	%rax, %rcx
	call	*%r9
	movl	%eax, -12(%rbp)
	cmpl	$0, -12(%rbp)
	jle	.L770
	movl	$0, -12(%rbp)
	jmp	.L770
.L762:
	movq	-24(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-4(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	shrb	$3, %al
	movzbl	%al, %eax
	cltq
	movzbl	-64(%rbp,%rax), %eax
	movzbl	%al, %edx
	movq	-24(%rbp), %rax
	movq	8(%rax), %rcx
	movl	-4(%rbp), %eax
	cltq
	addq	%rcx, %rax
	movzbl	(%rax), %eax
	movzbl	%al, %eax
	andl	$7, %eax
	movl	%eax, %ecx
	sarq	%cl, %rdx
	movq	%rdx, %rax
	andl	$1, %eax
	testq	%rax, %rax
	je	.L764
	movq	-24(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-4(%rbp), %eax
	cltq
	addq	$1, %rax
	addq	%rdx, %rax
	movq	%rax, -72(%rbp)
	movq	-24(%rbp), %rax
	movl	4(%rax), %eax
	movl	-4(%rbp), %edx
	addl	$1, %edx
	subl	%edx, %eax
	movl	%eax, -76(%rbp)
	movl	$-1, -80(%rbp)
	leaq	-80(%rbp), %rax
	movq	%rax, %rdx
	movq	16(%rbp), %rcx
	call	bsunread
	movl	%eax, -12(%rbp)
	cmpl	$0, -12(%rbp)
	js	.L771
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %edx
	movl	%edx, 4(%rax)
	movq	-24(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-4(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	movb	%al, -25(%rbp)
	movq	-24(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-4(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movb	$0, (%rax)
	movq	-24(%rbp), %rcx
	movl	-8(%rbp), %edx
	movq	40(%rbp), %rax
	movq	32(%rbp), %r9
	movq	%rcx, %r8
	movq	%rax, %rcx
	call	*%r9
	movl	%eax, -12(%rbp)
	cmpl	$0, -12(%rbp)
	js	.L772
	movq	-24(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-4(%rbp), %eax
	cltq
	addq	%rax, %rdx
	movzbl	-25(%rbp), %eax
	movb	%al, (%rdx)
	movq	-24(%rbp), %rax
	movl	$0, 4(%rax)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	addl	%eax, -8(%rbp)
	movl	$-1, -4(%rbp)
.L764:
	addl	$1, -4(%rbp)
	jmp	.L768
.L770:
	nop
	jmp	.L761
.L771:
	nop
	jmp	.L761
.L772:
	nop
.L761:
	movq	-24(%rbp), %rax
	movq	%rax, %rcx
	call	bdestroy
	movl	-12(%rbp), %eax
.L769:
	addq	$112, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	bssplitstrcb
	.def	bssplitstrcb;	.scl	2;	.type	32;	.endef
	.seh_proc	bssplitstrcb
bssplitstrcb:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$80, %rsp
	.seh_stackalloc	80
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movq	%rdx, 24(%rbp)
	movq	%r8, 32(%rbp)
	movq	%r9, 40(%rbp)
	cmpq	$0, 32(%rbp)
	je	.L774
	cmpq	$0, 16(%rbp)
	je	.L774
	movq	16(%rbp), %rax
	movq	16(%rax), %rax
	testq	%rax, %rax
	je	.L774
	cmpq	$0, 24(%rbp)
	je	.L774
	movq	24(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	jns	.L775
.L774:
	movl	$-1, %eax
	jmp	.L776
.L775:
	movq	24(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	$1, %eax
	jne	.L777
	movq	40(%rbp), %rcx
	movq	32(%rbp), %rdx
	movq	24(%rbp), %rax
	movq	%rcx, %r9
	movq	%rdx, %r8
	movq	%rax, %rdx
	movq	16(%rbp), %rcx
	call	bssplitscb
	jmp	.L776
.L777:
	leaq	.LC0(%rip), %rcx
	call	bfromcstr
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.L778
	movl	$-1, %eax
	jmp	.L776
.L778:
	movq	24(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	jne	.L779
	movl	$0, -4(%rbp)
	jmp	.L780
.L782:
	movq	-24(%rbp), %rdx
	movq	40(%rbp), %rax
	movq	32(%rbp), %r9
	movq	%rdx, %r8
	movl	$0, %edx
	movq	%rax, %rcx
	call	*%r9
	movl	%eax, -12(%rbp)
	cmpl	$0, -12(%rbp)
	jns	.L781
	movq	-24(%rbp), %rax
	movq	%rax, %rcx
	call	bdestroy
	movl	-12(%rbp), %eax
	jmp	.L776
.L781:
	movq	-24(%rbp), %rax
	movl	$0, 4(%rax)
	addl	$1, -4(%rbp)
.L780:
	movq	-24(%rbp), %rax
	movl	$256, %r8d
	movq	16(%rbp), %rdx
	movq	%rax, %rcx
	call	bsreada
	testl	%eax, %eax
	jns	.L782
	movl	$0, %eax
	jmp	.L776
.L779:
	movl	$0, -4(%rbp)
	movl	-4(%rbp), %eax
	movl	%eax, -8(%rbp)
	movl	-8(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	$0, -8(%rbp)
	movl	-8(%rbp), %eax
	movl	%eax, -4(%rbp)
.L788:
	movq	24(%rbp), %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, %r8
	movl	$0, %edx
	movq	%rax, %rcx
	call	binstr
	movl	%eax, -12(%rbp)
	cmpl	$0, -12(%rbp)
	js	.L783
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -40(%rbp)
	movl	-12(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	$-1, -48(%rbp)
	movq	24(%rbp), %rax
	movl	4(%rax), %edx
	movl	-12(%rbp), %eax
	addl	%edx, %eax
	movl	%eax, -4(%rbp)
	leaq	-48(%rbp), %rcx
	movl	-8(%rbp), %edx
	movq	40(%rbp), %rax
	movq	32(%rbp), %r9
	movq	%rcx, %r8
	movq	%rax, %rcx
	call	*%r9
	movl	%eax, -12(%rbp)
	cmpl	$0, -12(%rbp)
	js	.L789
	movl	-4(%rbp), %eax
	addl	%eax, -8(%rbp)
	movl	-4(%rbp), %edx
	movq	-24(%rbp), %rax
	movl	%edx, %r8d
	movl	$0, %edx
	movq	%rax, %rcx
	call	bdelete
	jmp	.L788
.L783:
	movq	-24(%rbp), %rax
	movl	$256, %r8d
	movq	16(%rbp), %rdx
	movq	%rax, %rcx
	call	bsreada
	movq	16(%rbp), %rcx
	call	bseof
	testl	%eax, %eax
	je	.L788
	movq	-24(%rbp), %rcx
	movl	-8(%rbp), %edx
	movq	40(%rbp), %rax
	movq	32(%rbp), %r9
	movq	%rcx, %r8
	movq	%rax, %rcx
	call	*%r9
	movl	%eax, -12(%rbp)
	cmpl	$0, -12(%rbp)
	jle	.L790
	movl	$0, -12(%rbp)
	jmp	.L790
.L789:
	nop
	jmp	.L785
.L790:
	nop
.L785:
	movq	-24(%rbp), %rax
	movq	%rax, %rcx
	call	bdestroy
	movl	-12(%rbp), %eax
.L776:
	addq	$80, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	bstrListCreate
	.def	bstrListCreate;	.scl	2;	.type	32;	.endef
	.seh_proc	bstrListCreate
bstrListCreate:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$48, %rsp
	.seh_stackalloc	48
	.seh_endprologue
	movl	$16, %ecx
	call	malloc
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L792
	movl	$8, %ecx
	call	malloc
	movq	%rax, %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, 8(%rax)
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	jne	.L793
	movq	-8(%rbp), %rax
	movq	%rax, %rcx
	call	free
	movq	$0, -8(%rbp)
	jmp	.L792
.L793:
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	-8(%rbp), %rax
	movl	$1, 4(%rax)
.L792:
	movq	-8(%rbp), %rax
	addq	$48, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	bstrListDestroy
	.def	bstrListDestroy;	.scl	2;	.type	32;	.endef
	.seh_proc	bstrListDestroy
bstrListDestroy:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$48, %rsp
	.seh_stackalloc	48
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	cmpq	$0, 16(%rbp)
	je	.L796
	movq	16(%rbp), %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	jns	.L797
.L796:
	movl	$-1, %eax
	jmp	.L798
.L797:
	movl	$0, -4(%rbp)
	jmp	.L799
.L801:
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-4(%rbp), %eax
	cltq
	salq	$3, %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	je	.L800
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-4(%rbp), %eax
	cltq
	salq	$3, %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rcx
	call	bdestroy
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-4(%rbp), %eax
	cltq
	salq	$3, %rax
	addq	%rdx, %rax
	movq	$0, (%rax)
.L800:
	addl	$1, -4(%rbp)
.L799:
	movq	16(%rbp), %rax
	movl	(%rax), %eax
	cmpl	%eax, -4(%rbp)
	jl	.L801
	movq	16(%rbp), %rax
	movl	$-1, (%rax)
	movq	16(%rbp), %rax
	movl	$-1, 4(%rax)
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rcx
	call	free
	movq	16(%rbp), %rax
	movq	$0, 8(%rax)
	movq	16(%rbp), %rcx
	call	free
	movl	$0, %eax
.L798:
	addq	$48, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	bstrListAlloc
	.def	bstrListAlloc;	.scl	2;	.type	32;	.endef
	.seh_proc	bstrListAlloc
bstrListAlloc:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$64, %rsp
	.seh_stackalloc	64
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movl	%edx, 24(%rbp)
	cmpq	$0, 16(%rbp)
	je	.L803
	cmpl	$0, 24(%rbp)
	jle	.L803
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L803
	movq	16(%rbp), %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	js	.L803
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	jle	.L803
	movq	16(%rbp), %rax
	movl	(%rax), %edx
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, %edx
	jle	.L804
.L803:
	movl	$-1, %eax
	jmp	.L805
.L804:
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, 24(%rbp)
	jg	.L806
	movl	$0, %eax
	jmp	.L805
.L806:
	movl	24(%rbp), %eax
	movl	%eax, %ecx
	call	snapUpSize
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	cltq
	salq	$3, %rax
	movq	%rax, -24(%rbp)
	movl	-12(%rbp), %eax
	cltq
	cmpq	%rax, -24(%rbp)
	jnb	.L807
	movl	$-1, %eax
	jmp	.L805
.L807:
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	movq	-24(%rbp), %rdx
	movq	%rax, %rcx
	call	realloc
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.L808
	movl	24(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	cltq
	salq	$3, %rax
	movq	%rax, -24(%rbp)
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	movq	-24(%rbp), %rdx
	movq	%rax, %rcx
	call	realloc
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.L808
	movl	$-1, %eax
	jmp	.L805
.L808:
	movq	16(%rbp), %rax
	movl	-12(%rbp), %edx
	movl	%edx, 4(%rax)
	movq	16(%rbp), %rax
	movq	-8(%rbp), %rdx
	movq	%rdx, 8(%rax)
	movl	$0, %eax
.L805:
	addq	$64, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	bstrListAllocMin
	.def	bstrListAllocMin;	.scl	2;	.type	32;	.endef
	.seh_proc	bstrListAllocMin
bstrListAllocMin:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$48, %rsp
	.seh_stackalloc	48
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movl	%edx, 24(%rbp)
	cmpq	$0, 16(%rbp)
	je	.L810
	cmpl	$0, 24(%rbp)
	jle	.L810
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L810
	movq	16(%rbp), %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	js	.L810
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	jle	.L810
	movq	16(%rbp), %rax
	movl	(%rax), %edx
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, %edx
	jle	.L811
.L810:
	movl	$-1, %eax
	jmp	.L812
.L811:
	movq	16(%rbp), %rax
	movl	(%rax), %eax
	cmpl	%eax, 24(%rbp)
	jge	.L813
	movq	16(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, 24(%rbp)
.L813:
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, 24(%rbp)
	jne	.L814
	movl	$0, %eax
	jmp	.L812
.L814:
	movl	24(%rbp), %eax
	cltq
	salq	$3, %rax
	movq	%rax, -8(%rbp)
	movl	24(%rbp), %eax
	cltq
	cmpq	%rax, -8(%rbp)
	jnb	.L815
	movl	$-1, %eax
	jmp	.L812
.L815:
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	movq	-8(%rbp), %rdx
	movq	%rax, %rcx
	call	realloc
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.L816
	movl	$-1, %eax
	jmp	.L812
.L816:
	movq	16(%rbp), %rax
	movl	24(%rbp), %edx
	movl	%edx, 4(%rax)
	movq	16(%rbp), %rax
	movq	-16(%rbp), %rdx
	movq	%rdx, 8(%rax)
	movl	$0, %eax
.L812:
	addq	$48, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	bsplitcb
	.def	bsplitcb;	.scl	2;	.type	32;	.endef
	.seh_proc	bsplitcb
bsplitcb:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$48, %rsp
	.seh_stackalloc	48
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movl	%edx, %eax
	movl	%r8d, 32(%rbp)
	movq	%r9, 40(%rbp)
	movb	%al, 24(%rbp)
	cmpq	$0, 40(%rbp)
	je	.L818
	cmpq	$0, 16(%rbp)
	je	.L818
	cmpl	$0, 32(%rbp)
	js	.L818
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, 32(%rbp)
	jle	.L819
.L818:
	movl	$-1, %eax
	jmp	.L820
.L819:
	movl	32(%rbp), %eax
	movl	%eax, -8(%rbp)
.L826:
	movl	-8(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	.L821
.L824:
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-4(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	cmpb	%al, 24(%rbp)
	je	.L827
	addl	$1, -4(%rbp)
.L821:
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, -4(%rbp)
	jl	.L824
	jmp	.L823
.L827:
	nop
.L823:
	movl	-4(%rbp), %eax
	subl	-8(%rbp), %eax
	movl	%eax, %ecx
	movl	-8(%rbp), %edx
	movq	48(%rbp), %rax
	movq	40(%rbp), %r9
	movl	%ecx, %r8d
	movq	%rax, %rcx
	call	*%r9
	movl	%eax, -12(%rbp)
	cmpl	$0, -12(%rbp)
	jns	.L825
	movl	-12(%rbp), %eax
	jmp	.L820
.L825:
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, -8(%rbp)
	jle	.L826
	movl	$0, %eax
.L820:
	addq	$48, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	bsplitscb
	.def	bsplitscb;	.scl	2;	.type	32;	.endef
	.seh_proc	bsplitscb
bsplitscb:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$96, %rsp
	.seh_stackalloc	96
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movq	%rdx, 24(%rbp)
	movl	%r8d, 32(%rbp)
	movq	%r9, 40(%rbp)
	cmpq	$0, 40(%rbp)
	je	.L829
	cmpq	$0, 16(%rbp)
	je	.L829
	cmpl	$0, 32(%rbp)
	js	.L829
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, 32(%rbp)
	jg	.L829
	cmpq	$0, 24(%rbp)
	je	.L829
	movq	24(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	jns	.L830
.L829:
	movl	$-1, %eax
	jmp	.L841
.L830:
	movq	24(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	jne	.L832
	movq	16(%rbp), %rax
	movl	4(%rax), %edx
	movq	48(%rbp), %rax
	movq	40(%rbp), %r9
	movl	%edx, %r8d
	movl	$0, %edx
	movq	%rax, %rcx
	call	*%r9
	movl	%eax, -12(%rbp)
	cmpl	$0, -12(%rbp)
	jle	.L833
	movl	$0, -12(%rbp)
.L833:
	movl	-12(%rbp), %eax
	jmp	.L841
.L832:
	movq	24(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	$1, %eax
	jne	.L834
	movq	24(%rbp), %rax
	movq	8(%rax), %rax
	movzbl	(%rax), %eax
	movzbl	%al, %eax
	movq	40(%rbp), %r8
	movl	32(%rbp), %ecx
	movq	48(%rbp), %rdx
	movq	%rdx, 32(%rsp)
	movq	%r8, %r9
	movl	%ecx, %r8d
	movl	%eax, %edx
	movq	16(%rbp), %rcx
	call	bsplitcb
	jmp	.L841
.L834:
	movq	24(%rbp), %rdx
	leaq	-48(%rbp), %rax
	movq	%rax, %rcx
	call	buildCharField
	movl	32(%rbp), %eax
	movl	%eax, -8(%rbp)
.L840:
	movl	-8(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	.L835
.L838:
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-4(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	shrb	$3, %al
	movzbl	%al, %eax
	cltq
	movzbl	-48(%rbp,%rax), %eax
	movzbl	%al, %edx
	movq	16(%rbp), %rax
	movq	8(%rax), %rcx
	movl	-4(%rbp), %eax
	cltq
	addq	%rcx, %rax
	movzbl	(%rax), %eax
	movzbl	%al, %eax
	andl	$7, %eax
	movl	%eax, %ecx
	sarq	%cl, %rdx
	movq	%rdx, %rax
	andl	$1, %eax
	testq	%rax, %rax
	jne	.L842
	addl	$1, -4(%rbp)
.L835:
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, -4(%rbp)
	jl	.L838
	jmp	.L837
.L842:
	nop
.L837:
	movl	-4(%rbp), %eax
	subl	-8(%rbp), %eax
	movl	%eax, %ecx
	movl	-8(%rbp), %edx
	movq	48(%rbp), %rax
	movq	40(%rbp), %r9
	movl	%ecx, %r8d
	movq	%rax, %rcx
	call	*%r9
	movl	%eax, -12(%rbp)
	cmpl	$0, -12(%rbp)
	jns	.L839
	movl	-12(%rbp), %eax
	jmp	.L841
.L839:
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, -8(%rbp)
	jle	.L840
	movl	$0, %eax
.L841:
	addq	$96, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	bsplitstrcb
	.def	bsplitstrcb;	.scl	2;	.type	32;	.endef
	.seh_proc	bsplitstrcb
bsplitstrcb:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$64, %rsp
	.seh_stackalloc	64
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movq	%rdx, 24(%rbp)
	movl	%r8d, 32(%rbp)
	movq	%r9, 40(%rbp)
	cmpq	$0, 40(%rbp)
	je	.L844
	cmpq	$0, 16(%rbp)
	je	.L844
	cmpl	$0, 32(%rbp)
	js	.L844
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, 32(%rbp)
	jg	.L844
	cmpq	$0, 24(%rbp)
	je	.L844
	movq	24(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	jns	.L845
.L844:
	movl	$-1, %eax
	jmp	.L846
.L845:
	movq	24(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	jne	.L847
	movl	32(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	.L848
.L850:
	movl	-4(%rbp), %edx
	movq	48(%rbp), %rax
	movq	40(%rbp), %r9
	movl	$1, %r8d
	movq	%rax, %rcx
	call	*%r9
	movl	%eax, -12(%rbp)
	cmpl	$0, -12(%rbp)
	jns	.L849
	movl	-12(%rbp), %eax
	jmp	.L846
.L849:
	addl	$1, -4(%rbp)
.L848:
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, -4(%rbp)
	jl	.L850
	movl	$0, %eax
	jmp	.L846
.L847:
	movq	24(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	$1, %eax
	jne	.L851
	movq	24(%rbp), %rax
	movq	8(%rax), %rax
	movzbl	(%rax), %eax
	movzbl	%al, %eax
	movq	40(%rbp), %r8
	movl	32(%rbp), %ecx
	movq	48(%rbp), %rdx
	movq	%rdx, 32(%rsp)
	movq	%r8, %r9
	movl	%ecx, %r8d
	movl	%eax, %edx
	movq	16(%rbp), %rcx
	call	bsplitcb
	jmp	.L846
.L851:
	movl	32(%rbp), %eax
	movl	%eax, -8(%rbp)
	movl	-8(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	.L852
.L855:
	movq	24(%rbp), %rax
	movl	4(%rax), %eax
	movslq	%eax, %rcx
	movq	16(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-4(%rbp), %eax
	cltq
	addq	%rax, %rdx
	movq	24(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rcx, %r8
	movq	%rax, %rcx
	call	memcmp
	testl	%eax, %eax
	jne	.L853
	movl	-4(%rbp), %eax
	subl	-8(%rbp), %eax
	movl	%eax, %ecx
	movl	-8(%rbp), %edx
	movq	48(%rbp), %rax
	movq	40(%rbp), %r9
	movl	%ecx, %r8d
	movq	%rax, %rcx
	call	*%r9
	movl	%eax, -12(%rbp)
	cmpl	$0, -12(%rbp)
	jns	.L854
	movl	-12(%rbp), %eax
	jmp	.L846
.L854:
	movq	24(%rbp), %rax
	movl	4(%rax), %eax
	addl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	movl	%eax, -8(%rbp)
.L853:
	addl	$1, -4(%rbp)
.L852:
	movq	16(%rbp), %rax
	movl	4(%rax), %edx
	movq	24(%rbp), %rax
	movl	4(%rax), %ecx
	movl	%edx, %eax
	subl	%ecx, %eax
	cmpl	%eax, -4(%rbp)
	jle	.L855
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	subl	-8(%rbp), %eax
	movl	%eax, %ecx
	movl	-8(%rbp), %edx
	movq	48(%rbp), %rax
	movq	40(%rbp), %r9
	movl	%ecx, %r8d
	movq	%rax, %rcx
	call	*%r9
	movl	%eax, -12(%rbp)
	cmpl	$0, -12(%rbp)
	jns	.L856
	movl	-12(%rbp), %eax
	jmp	.L846
.L856:
	movl	$0, %eax
.L846:
	addq	$64, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.def	bscb;	.scl	3;	.type	32;	.endef
	.seh_proc	bscb
bscb:
	pushq	%rbp
	.seh_pushreg	%rbp
	pushq	%rbx
	.seh_pushreg	%rbx
	subq	$72, %rsp
	.seh_stackalloc	72
	leaq	128(%rsp), %rbp
	.seh_setframe	%rbp, 128
	.seh_endprologue
	movq	%rcx, -32(%rbp)
	movl	%edx, -24(%rbp)
	movl	%r8d, -16(%rbp)
	movq	-32(%rbp), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movq	8(%rax), %rax
	movl	(%rax), %edx
	movq	-80(%rbp), %rax
	movq	8(%rax), %rax
	movl	4(%rax), %eax
	cmpl	%eax, %edx
	jl	.L858
	movq	-80(%rbp), %rax
	movq	8(%rax), %rax
	movl	4(%rax), %eax
	addl	%eax, %eax
	movl	%eax, -68(%rbp)
	jmp	.L859
.L862:
	movq	-80(%rbp), %rax
	movq	8(%rax), %rax
	movl	4(%rax), %eax
	cmpl	%eax, -68(%rbp)
	jge	.L860
	movl	$-1, %eax
	jmp	.L861
.L860:
	sall	-68(%rbp)
.L859:
	movq	-80(%rbp), %rax
	movq	8(%rax), %rax
	movl	(%rax), %eax
	cmpl	%eax, -68(%rbp)
	jle	.L862
	movl	-68(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-80(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, %rcx
	call	realloc
	movq	%rax, -88(%rbp)
	cmpq	$0, -88(%rbp)
	jne	.L863
	movl	$-1, %eax
	jmp	.L861
.L863:
	movq	-80(%rbp), %rax
	movq	8(%rax), %rax
	movq	-88(%rbp), %rdx
	movq	%rdx, 8(%rax)
	movq	-80(%rbp), %rax
	movq	8(%rax), %rax
	movl	-68(%rbp), %edx
	movl	%edx, 4(%rax)
.L858:
	movq	-80(%rbp), %rax
	movq	(%rax), %rax
	movq	-80(%rbp), %rdx
	movq	8(%rdx), %rdx
	movq	8(%rdx), %rcx
	movq	-80(%rbp), %rdx
	movq	8(%rdx), %rdx
	movl	(%rdx), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	leaq	(%rcx,%rdx), %rbx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %edx
	movl	%ecx, %r8d
	movq	%rax, %rcx
	call	bmidstr
	movq	%rax, (%rbx)
	movq	-80(%rbp), %rax
	movq	8(%rax), %rax
	movl	(%rax), %edx
	addl	$1, %edx
	movl	%edx, (%rax)
	movl	$0, %eax
.L861:
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	ret
	.seh_endproc
	.globl	bsplit
	.def	bsplit;	.scl	2;	.type	32;	.endef
	.seh_proc	bsplit
bsplit:
	pushq	%rbp
	.seh_pushreg	%rbp
	pushq	%rbx
	.seh_pushreg	%rbx
	subq	$72, %rsp
	.seh_stackalloc	72
	leaq	128(%rsp), %rbp
	.seh_setframe	%rbp, 128
	.seh_endprologue
	movq	%rcx, -32(%rbp)
	movl	%edx, %eax
	movb	%al, -24(%rbp)
	cmpq	$0, -32(%rbp)
	je	.L865
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L865
	movq	-32(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	jns	.L866
.L865:
	movl	$0, %eax
	jmp	.L871
.L866:
	movl	$16, %ecx
	call	malloc
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	testq	%rax, %rax
	jne	.L868
	movl	$0, %eax
	jmp	.L871
.L868:
	movq	-72(%rbp), %rax
	movl	$4, 4(%rax)
	movq	-72(%rbp), %rax
	movl	4(%rax), %eax
	cltq
	salq	$3, %rax
	movq	-72(%rbp), %rbx
	movq	%rax, %rcx
	call	malloc
	movq	%rax, 8(%rbx)
	movq	-72(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	jne	.L869
	movq	-72(%rbp), %rax
	movq	%rax, %rcx
	call	free
	movl	$0, %eax
	jmp	.L871
.L869:
	movq	-32(%rbp), %rax
	movq	%rax, -80(%rbp)
	movq	-72(%rbp), %rax
	movl	$0, (%rax)
	movzbl	-24(%rbp), %eax
	leaq	-80(%rbp), %rdx
	movq	%rdx, 32(%rsp)
	leaq	bscb(%rip), %r9
	movl	$0, %r8d
	movl	%eax, %edx
	movq	-32(%rbp), %rcx
	call	bsplitcb
	testl	%eax, %eax
	jns	.L870
	movq	-72(%rbp), %rax
	movq	%rax, %rcx
	call	bstrListDestroy
	movl	$0, %eax
	jmp	.L871
.L870:
	movq	-72(%rbp), %rax
.L871:
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	ret
	.seh_endproc
	.globl	bsplitstr
	.def	bsplitstr;	.scl	2;	.type	32;	.endef
	.seh_proc	bsplitstr
bsplitstr:
	pushq	%rbp
	.seh_pushreg	%rbp
	pushq	%rbx
	.seh_pushreg	%rbx
	subq	$72, %rsp
	.seh_stackalloc	72
	leaq	128(%rsp), %rbp
	.seh_setframe	%rbp, 128
	.seh_endprologue
	movq	%rcx, -32(%rbp)
	movq	%rdx, -24(%rbp)
	cmpq	$0, -32(%rbp)
	je	.L873
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L873
	movq	-32(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	jns	.L874
.L873:
	movl	$0, %eax
	jmp	.L879
.L874:
	movl	$16, %ecx
	call	malloc
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	testq	%rax, %rax
	jne	.L876
	movl	$0, %eax
	jmp	.L879
.L876:
	movq	-72(%rbp), %rax
	movl	$4, 4(%rax)
	movq	-72(%rbp), %rax
	movl	4(%rax), %eax
	cltq
	salq	$3, %rax
	movq	-72(%rbp), %rbx
	movq	%rax, %rcx
	call	malloc
	movq	%rax, 8(%rbx)
	movq	-72(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	jne	.L877
	movq	-72(%rbp), %rax
	movq	%rax, %rcx
	call	free
	movl	$0, %eax
	jmp	.L879
.L877:
	movq	-32(%rbp), %rax
	movq	%rax, -80(%rbp)
	movq	-72(%rbp), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	leaq	-80(%rbp), %rdx
	movq	%rdx, 32(%rsp)
	leaq	bscb(%rip), %r9
	movl	$0, %r8d
	movq	%rax, %rdx
	movq	-32(%rbp), %rcx
	call	bsplitstrcb
	testl	%eax, %eax
	jns	.L878
	movq	-72(%rbp), %rax
	movq	%rax, %rcx
	call	bstrListDestroy
	movl	$0, %eax
	jmp	.L879
.L878:
	movq	-72(%rbp), %rax
.L879:
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	ret
	.seh_endproc
	.globl	bsplits
	.def	bsplits;	.scl	2;	.type	32;	.endef
	.seh_proc	bsplits
bsplits:
	pushq	%rbp
	.seh_pushreg	%rbp
	pushq	%rbx
	.seh_pushreg	%rbx
	subq	$72, %rsp
	.seh_stackalloc	72
	leaq	128(%rsp), %rbp
	.seh_setframe	%rbp, 128
	.seh_endprologue
	movq	%rcx, -32(%rbp)
	movq	%rdx, -24(%rbp)
	cmpq	$0, -32(%rbp)
	je	.L881
	movq	-32(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	js	.L881
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L881
	cmpq	$0, -24(%rbp)
	je	.L881
	movq	-24(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	js	.L881
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	jne	.L882
.L881:
	movl	$0, %eax
	jmp	.L887
.L882:
	movl	$16, %ecx
	call	malloc
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	testq	%rax, %rax
	jne	.L884
	movl	$0, %eax
	jmp	.L887
.L884:
	movq	-72(%rbp), %rax
	movl	$4, 4(%rax)
	movq	-72(%rbp), %rax
	movl	4(%rax), %eax
	cltq
	salq	$3, %rax
	movq	-72(%rbp), %rbx
	movq	%rax, %rcx
	call	malloc
	movq	%rax, 8(%rbx)
	movq	-72(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	jne	.L885
	movq	-72(%rbp), %rax
	movq	%rax, %rcx
	call	free
	movl	$0, %eax
	jmp	.L887
.L885:
	movq	-32(%rbp), %rax
	movq	%rax, -80(%rbp)
	movq	-72(%rbp), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	leaq	-80(%rbp), %rdx
	movq	%rdx, 32(%rsp)
	leaq	bscb(%rip), %r9
	movl	$0, %r8d
	movq	%rax, %rdx
	movq	-32(%rbp), %rcx
	call	bsplitscb
	testl	%eax, %eax
	jns	.L886
	movq	-72(%rbp), %rax
	movq	%rax, %rcx
	call	bstrListDestroy
	movl	$0, %eax
	jmp	.L887
.L886:
	movq	-72(%rbp), %rax
.L887:
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	ret
	.seh_endproc
	.globl	bformata
	.def	bformata;	.scl	2;	.type	32;	.endef
	.seh_proc	bformata
bformata:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$64, %rsp
	.seh_stackalloc	64
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movq	%rdx, 24(%rbp)
	movq	%r8, 32(%rbp)
	movq	%r9, 40(%rbp)
	cmpq	$0, 16(%rbp)
	je	.L889
	cmpq	$0, 24(%rbp)
	je	.L889
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L889
	movq	16(%rbp), %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	jle	.L889
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	js	.L889
	movq	16(%rbp), %rax
	movl	4(%rax), %edx
	movq	16(%rbp), %rax
	movl	(%rax), %eax
	cmpl	%eax, %edx
	jle	.L890
.L889:
	movl	$-1, %eax
	jmp	.L900
.L890:
	movq	24(%rbp), %rax
	movq	%rax, %rcx
	call	strlen
	addl	%eax, %eax
	movl	%eax, -12(%rbp)
	cmpl	$15, -12(%rbp)
	jg	.L892
	movl	$16, -12(%rbp)
.L892:
	movl	-12(%rbp), %eax
	addl	$2, %eax
	leaq	.LC0(%rip), %rdx
	movl	%eax, %ecx
	call	bfromcstralloc
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.L899
	movl	$1, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$2, %eax
	leaq	.LC0(%rip), %rdx
	movl	%eax, %ecx
	call	bfromcstralloc
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.L899
	movl	$-1, %eax
	jmp	.L900
.L899:
	leaq	32(%rbp), %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %r8
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	24(%rbp), %rcx
	movq	%r8, %r9
	movq	%rcx, %r8
	movq	%rax, %rcx
	call	vsnprintf
	movl	%eax, -16(%rbp)
	movq	-8(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-12(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movb	$0, (%rax)
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rcx
	call	strlen
	movl	%eax, %edx
	movq	-8(%rbp), %rax
	movl	%edx, 4(%rax)
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, -12(%rbp)
	jg	.L902
	movl	-16(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jle	.L896
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.L897
.L896:
	sall	-12(%rbp)
.L897:
	movl	-12(%rbp), %eax
	leal	2(%rax), %edx
	movq	-8(%rbp), %rax
	movq	%rax, %rcx
	call	balloc
	testl	%eax, %eax
	je	.L899
	movq	-8(%rbp), %rax
	movq	%rax, %rcx
	call	bdestroy
	movl	$-1, %eax
	jmp	.L900
.L902:
	nop
	movq	-8(%rbp), %rax
	movq	%rax, %rdx
	movq	16(%rbp), %rcx
	call	bconcat
	movl	%eax, -16(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, %rcx
	call	bdestroy
	movl	-16(%rbp), %eax
.L900:
	addq	$64, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	bassignformat
	.def	bassignformat;	.scl	2;	.type	32;	.endef
	.seh_proc	bassignformat
bassignformat:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$64, %rsp
	.seh_stackalloc	64
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movq	%rdx, 24(%rbp)
	movq	%r8, 32(%rbp)
	movq	%r9, 40(%rbp)
	cmpq	$0, 16(%rbp)
	je	.L904
	cmpq	$0, 24(%rbp)
	je	.L904
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L904
	movq	16(%rbp), %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	jle	.L904
	movq	16(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	js	.L904
	movq	16(%rbp), %rax
	movl	4(%rax), %edx
	movq	16(%rbp), %rax
	movl	(%rax), %eax
	cmpl	%eax, %edx
	jle	.L905
.L904:
	movl	$-1, %eax
	jmp	.L915
.L905:
	movq	24(%rbp), %rax
	movq	%rax, %rcx
	call	strlen
	addl	%eax, %eax
	movl	%eax, -12(%rbp)
	cmpl	$15, -12(%rbp)
	jg	.L907
	movl	$16, -12(%rbp)
.L907:
	movl	-12(%rbp), %eax
	addl	$2, %eax
	leaq	.LC0(%rip), %rdx
	movl	%eax, %ecx
	call	bfromcstralloc
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.L914
	movl	$1, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$2, %eax
	leaq	.LC0(%rip), %rdx
	movl	%eax, %ecx
	call	bfromcstralloc
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.L914
	movl	$-1, %eax
	jmp	.L915
.L914:
	leaq	32(%rbp), %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %r8
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	24(%rbp), %rcx
	movq	%r8, %r9
	movq	%rcx, %r8
	movq	%rax, %rcx
	call	vsnprintf
	movl	%eax, -16(%rbp)
	movq	-8(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-12(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movb	$0, (%rax)
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rcx
	call	strlen
	movl	%eax, %edx
	movq	-8(%rbp), %rax
	movl	%edx, 4(%rax)
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, -12(%rbp)
	jg	.L917
	movl	-16(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jle	.L911
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.L912
.L911:
	sall	-12(%rbp)
.L912:
	movl	-12(%rbp), %eax
	leal	2(%rax), %edx
	movq	-8(%rbp), %rax
	movq	%rax, %rcx
	call	balloc
	testl	%eax, %eax
	je	.L914
	movq	-8(%rbp), %rax
	movq	%rax, %rcx
	call	bdestroy
	movl	$-1, %eax
	jmp	.L915
.L917:
	nop
	movq	-8(%rbp), %rax
	movq	%rax, %rdx
	movq	16(%rbp), %rcx
	call	bassign
	movl	%eax, -16(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, %rcx
	call	bdestroy
	movl	-16(%rbp), %eax
.L915:
	addq	$64, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	bformat
	.def	bformat;	.scl	2;	.type	32;	.endef
	.seh_proc	bformat
bformat:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$64, %rsp
	.seh_stackalloc	64
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movq	%rdx, 24(%rbp)
	movq	%r8, 32(%rbp)
	movq	%r9, 40(%rbp)
	cmpq	$0, 16(%rbp)
	jne	.L919
	movl	$0, %eax
	jmp	.L929
.L919:
	movq	16(%rbp), %rcx
	call	strlen
	addl	%eax, %eax
	movl	%eax, -12(%rbp)
	cmpl	$15, -12(%rbp)
	jg	.L921
	movl	$16, -12(%rbp)
.L921:
	movl	-12(%rbp), %eax
	addl	$2, %eax
	leaq	.LC0(%rip), %rdx
	movl	%eax, %ecx
	call	bfromcstralloc
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.L928
	movl	$1, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$2, %eax
	leaq	.LC0(%rip), %rdx
	movl	%eax, %ecx
	call	bfromcstralloc
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.L928
	movl	$0, %eax
	jmp	.L929
.L928:
	leaq	24(%rbp), %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rcx
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rcx, %r9
	movq	16(%rbp), %r8
	movq	%rax, %rcx
	call	vsnprintf
	movl	%eax, -16(%rbp)
	movq	-8(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-12(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movb	$0, (%rax)
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rcx
	call	strlen
	movl	%eax, %edx
	movq	-8(%rbp), %rax
	movl	%edx, 4(%rax)
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, -12(%rbp)
	jg	.L931
	movl	-16(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jle	.L925
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.L926
.L925:
	sall	-12(%rbp)
.L926:
	movl	-12(%rbp), %eax
	leal	2(%rax), %edx
	movq	-8(%rbp), %rax
	movq	%rax, %rcx
	call	balloc
	testl	%eax, %eax
	je	.L928
	movq	-8(%rbp), %rax
	movq	%rax, %rcx
	call	bdestroy
	movl	$0, %eax
	jmp	.L929
.L931:
	nop
	movq	-8(%rbp), %rax
.L929:
	addq	$64, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	bvcformata
	.def	bvcformata;	.scl	2;	.type	32;	.endef
	.seh_proc	bvcformata
bvcformata:
	pushq	%rbp
	.seh_pushreg	%rbp
	pushq	%rbx
	.seh_pushreg	%rbx
	subq	$56, %rsp
	.seh_stackalloc	56
	leaq	128(%rsp), %rbp
	.seh_setframe	%rbp, 128
	.seh_endprologue
	movq	%rcx, -48(%rbp)
	movl	%edx, -40(%rbp)
	movq	%r8, -32(%rbp)
	movq	%r9, -24(%rbp)
	cmpq	$0, -48(%rbp)
	je	.L933
	cmpq	$0, -32(%rbp)
	je	.L933
	cmpl	$0, -40(%rbp)
	jle	.L933
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L933
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	jle	.L933
	movq	-48(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	js	.L933
	movq	-48(%rbp), %rax
	movl	4(%rax), %edx
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	cmpl	%eax, %edx
	jle	.L934
.L933:
	movl	$-1, %eax
	jmp	.L935
.L934:
	movq	-48(%rbp), %rax
	movl	4(%rax), %edx
	movl	-40(%rbp), %eax
	addl	%edx, %eax
	movl	%eax, -84(%rbp)
	movl	-84(%rbp), %eax
	addl	$2, %eax
	cmpl	%eax, -40(%rbp)
	jle	.L936
	movl	$-1, %eax
	jmp	.L935
.L936:
	movl	-84(%rbp), %eax
	addl	$2, %eax
	movl	%eax, %edx
	movq	-48(%rbp), %rcx
	call	balloc
	testl	%eax, %eax
	je	.L937
	movl	$-1, %eax
	jmp	.L935
.L937:
	movl	-40(%rbp), %eax
	addl	$2, %eax
	cltq
	movq	-48(%rbp), %rdx
	movq	8(%rdx), %rcx
	movq	-48(%rbp), %rdx
	movl	4(%rdx), %edx
	movslq	%edx, %rdx
	addq	%rdx, %rcx
	movq	-24(%rbp), %r8
	movq	-32(%rbp), %rdx
	movq	%r8, %r9
	movq	%rdx, %r8
	movq	%rax, %rdx
	call	vsnprintf
	movl	%eax, -92(%rbp)
	movq	-48(%rbp), %rax
	movq	8(%rax), %rdx
	movq	-48(%rbp), %rax
	movl	4(%rax), %ecx
	movl	-40(%rbp), %eax
	addl	%ecx, %eax
	cltq
	addq	$2, %rax
	addq	%rdx, %rax
	movb	$0, (%rax)
	movq	-48(%rbp), %rax
	movl	4(%rax), %ebx
	movq	-48(%rbp), %rax
	movq	8(%rax), %rdx
	movq	-48(%rbp), %rax
	movl	4(%rax), %eax
	cltq
	addq	%rdx, %rax
	movq	%rax, %rcx
	call	strlen
	addl	%ebx, %eax
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.L938
	movq	-48(%rbp), %rax
	movl	-88(%rbp), %edx
	movl	%edx, 4(%rax)
	movl	$0, %eax
	jmp	.L935
.L938:
	movq	-48(%rbp), %rax
	movq	8(%rax), %rdx
	movq	-48(%rbp), %rax
	movl	4(%rax), %eax
	cltq
	addq	%rdx, %rax
	movb	$0, (%rax)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	cmpl	%eax, -92(%rbp)
	jle	.L939
	movl	-92(%rbp), %eax
	movl	%eax, -88(%rbp)
	jmp	.L940
.L939:
	cmpl	$1073741823, -40(%rbp)
	jle	.L941
	movl	$2147483647, -88(%rbp)
	jmp	.L940
.L941:
	movl	-40(%rbp), %eax
	addl	%eax, %eax
	movl	%eax, -88(%rbp)
.L940:
	movl	-88(%rbp), %eax
	negl	%eax
	movl	%eax, -84(%rbp)
	cmpl	$-1, -84(%rbp)
	jl	.L942
	movl	$-2, -84(%rbp)
.L942:
	movl	-84(%rbp), %eax
.L935:
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	ret
	.seh_endproc
	.ident	"GCC: (GNU) 10.2.0"
	.def	realloc;	.scl	2;	.type	32;	.endef
	.def	malloc;	.scl	2;	.type	32;	.endef
	.def	memcpy;	.scl	2;	.type	32;	.endef
	.def	free;	.scl	2;	.type	32;	.endef
	.def	strlen;	.scl	2;	.type	32;	.endef
	.def	memmove;	.scl	2;	.type	32;	.endef
	.def	__locale_ctype_ptr;	.scl	2;	.type	32;	.endef
	.def	toupper;	.scl	2;	.type	32;	.endef
	.def	tolower;	.scl	2;	.type	32;	.endef
	.def	memcmp;	.scl	2;	.type	32;	.endef
	.def	memchr;	.scl	2;	.type	32;	.endef
	.def	memset;	.scl	2;	.type	32;	.endef
	.def	vsnprintf;	.scl	2;	.type	32;	.endef
